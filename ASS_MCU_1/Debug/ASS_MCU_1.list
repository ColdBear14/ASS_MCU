
ASS_MCU_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003514  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800364c  0800364c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800364c  0800364c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800364c  0800364c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000005c  080036b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080036b0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166bd  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c22  00000000  00000000  00036742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00039368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dbf  00000000  00000000  0003b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ae0  00000000  00000000  00054f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4d0  00000000  00000000  0006ba1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  000f8f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003608 	.word	0x08003608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003608 	.word	0x08003608

0800014c <IsButtonPress>:
int TimerForKeyPress[3] = {300,300,300};

int button_flag[3];
int button_long_flag[3];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000160 	.word	0x20000160

08000180 <IsButtonLongPress>:

int IsButtonLongPress(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (button_long_flag[index] == 1) {
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <IsButtonLongPress+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <IsButtonLongPress+0x22>
		button_long_flag[index] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <IsButtonLongPress+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <IsButtonLongPress+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000170 	.word	0x20000170

080001b4 <subKeyProcess>:


void subKeyProcess(int index) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	20000160 	.word	0x20000160

080001d4 <getIndex>:

int getIndex(int index) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	switch(index){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d015      	beq.n	800020e <getIndex+0x3a>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	dc19      	bgt.n	800021c <getIndex+0x48>
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d003      	beq.n	80001f6 <getIndex+0x22>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d006      	beq.n	8000202 <getIndex+0x2e>
			break;
		case 2:
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
			break;
		default:
			break;
 80001f4:	e012      	b.n	800021c <getIndex+0x48>
			return HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001f6:	2101      	movs	r1, #1
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <getIndex+0x54>)
 80001fa:	f001 fbf5 	bl	80019e8 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	e00e      	b.n	8000220 <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000202:	2102      	movs	r1, #2
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <getIndex+0x54>)
 8000206:	f001 fbef 	bl	80019e8 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	e008      	b.n	8000220 <getIndex+0x4c>
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <getIndex+0x58>)
 8000214:	f001 fbe8 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	e001      	b.n	8000220 <getIndex+0x4c>
			break;
 800021c:	bf00      	nop
	}
	return 0;
 800021e:	2300      	movs	r3, #0
}
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010800 	.word	0x40010800
 800022c:	40011000 	.word	0x40011000

08000230 <getKeyInput>:

void getKeyInput() {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e073      	b.n	8000324 <getKeyInput+0xf4>
		KeyReg0[i] = KeyReg1[i];
 800023c:	4a3d      	ldr	r2, [pc, #244]	; (8000334 <getKeyInput+0x104>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	493c      	ldr	r1, [pc, #240]	; (8000338 <getKeyInput+0x108>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800024c:	4a3b      	ldr	r2, [pc, #236]	; (800033c <getKeyInput+0x10c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4937      	ldr	r1, [pc, #220]	; (8000334 <getKeyInput+0x104>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f7ff ffb9 	bl	80001d4 <getIndex>
 8000262:	4602      	mov	r2, r0
 8000264:	4935      	ldr	r1, [pc, #212]	; (800033c <getKeyInput+0x10c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800026c:	4a32      	ldr	r2, [pc, #200]	; (8000338 <getKeyInput+0x108>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	492f      	ldr	r1, [pc, #188]	; (8000334 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027c:	429a      	cmp	r2, r3
 800027e:	d14e      	bne.n	800031e <getKeyInput+0xee>
 8000280:	4a2c      	ldr	r2, [pc, #176]	; (8000334 <getKeyInput+0x104>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	492c      	ldr	r1, [pc, #176]	; (800033c <getKeyInput+0x10c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000290:	429a      	cmp	r2, r3
 8000292:	d144      	bne.n	800031e <getKeyInput+0xee>
			//case short pressed
			if (KeyReg3[i] != KeyReg2[i]) {
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <getKeyInput+0x110>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029c:	4927      	ldr	r1, [pc, #156]	; (800033c <getKeyInput+0x10c>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d01b      	beq.n	80002e0 <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 80002a8:	4a24      	ldr	r2, [pc, #144]	; (800033c <getKeyInput+0x10c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b0:	4923      	ldr	r1, [pc, #140]	; (8000340 <getKeyInput+0x110>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 80002b8:	4a20      	ldr	r2, [pc, #128]	; (800033c <getKeyInput+0x10c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d12c      	bne.n	800031e <getKeyInput+0xee>
					//todo
					subKeyProcess(i);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff75 	bl	80001b4 <subKeyProcess>
					HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80002ca:	2120      	movs	r1, #32
 80002cc:	481d      	ldr	r0, [pc, #116]	; (8000344 <getKeyInput+0x114>)
 80002ce:	f001 fbba 	bl	8001a46 <HAL_GPIO_TogglePin>
					TimerForKeyPress[i] = 300;
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <getKeyInput+0x118>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002de:	e01e      	b.n	800031e <getKeyInput+0xee>

				}
			} else { // case long pressed
				TimerForKeyPress[i]--;
 80002e0:	4a19      	ldr	r2, [pc, #100]	; (8000348 <getKeyInput+0x118>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	1e5a      	subs	r2, r3, #1
 80002ea:	4917      	ldr	r1, [pc, #92]	; (8000348 <getKeyInput+0x118>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <getKeyInput+0x118>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d10f      	bne.n	800031e <getKeyInput+0xee>
					//todo
					button_long_flag[i] = 1;
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <getKeyInput+0x11c>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2101      	movs	r1, #1
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <getKeyInput+0x118>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					KeyReg3[i] = NORMAL_STATE;
 8000314:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <getKeyInput+0x110>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2101      	movs	r1, #1
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	dd88      	ble.n	800023c <getKeyInput+0xc>
				}
			}
		}
	}
}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000000 	.word	0x20000000
 800033c:	20000018 	.word	0x20000018
 8000340:	20000024 	.word	0x20000024
 8000344:	40010800 	.word	0x40010800
 8000348:	20000030 	.word	0x20000030
 800034c:	20000170 	.word	0x20000170

08000350 <displayTraffic>:

int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;

void displayTraffic() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 8000354:	4b2d      	ldr	r3, [pc, #180]	; (800040c <displayTraffic+0xbc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d109      	bne.n	8000370 <displayTraffic+0x20>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	482b      	ldr	r0, [pc, #172]	; (8000410 <displayTraffic+0xc0>)
 8000362:	f001 fb58 	bl	8001a16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2120      	movs	r1, #32
 800036a:	4829      	ldr	r0, [pc, #164]	; (8000410 <displayTraffic+0xc0>)
 800036c:	f001 fb53 	bl	8001a16 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <displayTraffic+0xc4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d109      	bne.n	800038c <displayTraffic+0x3c>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2108      	movs	r1, #8
 800037c:	4824      	ldr	r0, [pc, #144]	; (8000410 <displayTraffic+0xc0>)
 800037e:	f001 fb4a 	bl	8001a16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2120      	movs	r1, #32
 8000386:	4822      	ldr	r0, [pc, #136]	; (8000410 <displayTraffic+0xc0>)
 8000388:	f001 fb45 	bl	8001a16 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <displayTraffic+0xc8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d109      	bne.n	80003a8 <displayTraffic+0x58>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2108      	movs	r1, #8
 8000398:	481d      	ldr	r0, [pc, #116]	; (8000410 <displayTraffic+0xc0>)
 800039a:	f001 fb3c 	bl	8001a16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	481b      	ldr	r0, [pc, #108]	; (8000410 <displayTraffic+0xc0>)
 80003a4:	f001 fb37 	bl	8001a16 <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <displayTraffic+0xcc>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10b      	bne.n	80003c8 <displayTraffic+0x78>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b6:	481a      	ldr	r0, [pc, #104]	; (8000420 <displayTraffic+0xd0>)
 80003b8:	f001 fb2d 	bl	8001a16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c2:	4817      	ldr	r0, [pc, #92]	; (8000420 <displayTraffic+0xd0>)
 80003c4:	f001 fb27 	bl	8001a16 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <displayTraffic+0xd4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10b      	bne.n	80003e8 <displayTraffic+0x98>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4812      	ldr	r0, [pc, #72]	; (8000420 <displayTraffic+0xd0>)
 80003d8:	f001 fb1d 	bl	8001a16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <displayTraffic+0xd0>)
 80003e4:	f001 fb17 	bl	8001a16 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <displayTraffic+0xd8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d10b      	bne.n	8000408 <displayTraffic+0xb8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	480a      	ldr	r0, [pc, #40]	; (8000420 <displayTraffic+0xd0>)
 80003f8:	f001 fb0d 	bl	8001a16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000402:	4807      	ldr	r0, [pc, #28]	; (8000420 <displayTraffic+0xd0>)
 8000404:	f001 fb07 	bl	8001a16 <HAL_GPIO_WritePin>
	}
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000003c 	.word	0x2000003c
 8000410:	40010c00 	.word	0x40010c00
 8000414:	2000007c 	.word	0x2000007c
 8000418:	20000078 	.word	0x20000078
 800041c:	20000080 	.word	0x20000080
 8000420:	40010800 	.word	0x40010800
 8000424:	20000084 	.word	0x20000084
 8000428:	20000040 	.word	0x20000040

0800042c <fsm_automatic>:
#include "fsm_automatic.h"

int countDownLEDA;
int countDownLEDB;

void fsm_automatic(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch (statusLED) {
 8000430:	4b54      	ldr	r3, [pc, #336]	; (8000584 <fsm_automatic+0x158>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b0b      	subs	r3, #11
 8000436:	2b03      	cmp	r3, #3
 8000438:	f200 80a0 	bhi.w	800057c <fsm_automatic+0x150>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_automatic+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000455 	.word	0x08000455
 8000448:	08000497 	.word	0x08000497
 800044c:	080004e9 	.word	0x080004e9
 8000450:	0800052b 	.word	0x0800052b
			case RED_GREEN:
				if(IsButtonPress(2) == 1){
 8000454:	2002      	movs	r0, #2
 8000456:	f7ff fe79 	bl	800014c <IsButtonPress>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d102      	bne.n	8000466 <fsm_automatic+0x3a>
					statusLED = MAN_RED_GREEN;
 8000460:	4b48      	ldr	r3, [pc, #288]	; (8000584 <fsm_automatic+0x158>)
 8000462:	2215      	movs	r2, #21
 8000464:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDB <= 0){
 8000466:	4b48      	ldr	r3, [pc, #288]	; (8000588 <fsm_automatic+0x15c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dc06      	bgt.n	800047c <fsm_automatic+0x50>
					statusLED = RED_YELLOW;
 800046e:	4b45      	ldr	r3, [pc, #276]	; (8000584 <fsm_automatic+0x158>)
 8000470:	220c      	movs	r2, #12
 8000472:	601a      	str	r2, [r3, #0]
					countDownLEDB = count_YELLOW;
 8000474:	4b45      	ldr	r3, [pc, #276]	; (800058c <fsm_automatic+0x160>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a43      	ldr	r2, [pc, #268]	; (8000588 <fsm_automatic+0x15c>)
 800047a:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 800047c:	f7ff ff68 	bl	8000350 <displayTraffic>
					countDownLEDA--;
 8000480:	4b43      	ldr	r3, [pc, #268]	; (8000590 <fsm_automatic+0x164>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a42      	ldr	r2, [pc, #264]	; (8000590 <fsm_automatic+0x164>)
 8000488:	6013      	str	r3, [r2, #0]
					countDownLEDB--;
 800048a:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <fsm_automatic+0x15c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3b01      	subs	r3, #1
 8000490:	4a3d      	ldr	r2, [pc, #244]	; (8000588 <fsm_automatic+0x15c>)
 8000492:	6013      	str	r3, [r2, #0]
				break;
 8000494:	e073      	b.n	800057e <fsm_automatic+0x152>
			case RED_YELLOW:
				if(IsButtonPress(2) == 1){
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff fe58 	bl	800014c <IsButtonPress>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d102      	bne.n	80004a8 <fsm_automatic+0x7c>
					statusLED = MAN_RED_YELLOW;
 80004a2:	4b38      	ldr	r3, [pc, #224]	; (8000584 <fsm_automatic+0x158>)
 80004a4:	2216      	movs	r2, #22
 80004a6:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDA <= 0 && countDownLEDB <= 0){
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <fsm_automatic+0x164>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dc0e      	bgt.n	80004ce <fsm_automatic+0xa2>
 80004b0:	4b35      	ldr	r3, [pc, #212]	; (8000588 <fsm_automatic+0x15c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc0a      	bgt.n	80004ce <fsm_automatic+0xa2>
					statusLED = GREEN_RED;
 80004b8:	4b32      	ldr	r3, [pc, #200]	; (8000584 <fsm_automatic+0x158>)
 80004ba:	220d      	movs	r2, #13
 80004bc:	601a      	str	r2, [r3, #0]
					countDownLEDA = count_GREEN;
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <fsm_automatic+0x168>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a33      	ldr	r2, [pc, #204]	; (8000590 <fsm_automatic+0x164>)
 80004c4:	6013      	str	r3, [r2, #0]
					countDownLEDB = count_RED;
 80004c6:	4b34      	ldr	r3, [pc, #208]	; (8000598 <fsm_automatic+0x16c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <fsm_automatic+0x15c>)
 80004cc:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 80004ce:	f7ff ff3f 	bl	8000350 <displayTraffic>
					countDownLEDA--;
 80004d2:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <fsm_automatic+0x164>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a2d      	ldr	r2, [pc, #180]	; (8000590 <fsm_automatic+0x164>)
 80004da:	6013      	str	r3, [r2, #0]
					countDownLEDB--;
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <fsm_automatic+0x15c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	4a29      	ldr	r2, [pc, #164]	; (8000588 <fsm_automatic+0x15c>)
 80004e4:	6013      	str	r3, [r2, #0]

				break;
 80004e6:	e04a      	b.n	800057e <fsm_automatic+0x152>
			case GREEN_RED:
				if(IsButtonPress(2) == 1){
 80004e8:	2002      	movs	r0, #2
 80004ea:	f7ff fe2f 	bl	800014c <IsButtonPress>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d102      	bne.n	80004fa <fsm_automatic+0xce>
					statusLED = YELLOW_RED;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <fsm_automatic+0x158>)
 80004f6:	220e      	movs	r2, #14
 80004f8:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDA <= 0){
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <fsm_automatic+0x164>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	dc06      	bgt.n	8000510 <fsm_automatic+0xe4>
					statusLED = YELLOW_RED;
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <fsm_automatic+0x158>)
 8000504:	220e      	movs	r2, #14
 8000506:	601a      	str	r2, [r3, #0]
					countDownLEDA = count_YELLOW;
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <fsm_automatic+0x160>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a20      	ldr	r2, [pc, #128]	; (8000590 <fsm_automatic+0x164>)
 800050e:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 8000510:	f7ff ff1e 	bl	8000350 <displayTraffic>
					countDownLEDA--;
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <fsm_automatic+0x164>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <fsm_automatic+0x164>)
 800051c:	6013      	str	r3, [r2, #0]
					countDownLEDB--;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <fsm_automatic+0x15c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	4a18      	ldr	r2, [pc, #96]	; (8000588 <fsm_automatic+0x15c>)
 8000526:	6013      	str	r3, [r2, #0]

				break;
 8000528:	e029      	b.n	800057e <fsm_automatic+0x152>
			case YELLOW_RED:
				if(IsButtonPress(2) == 1){
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff fe0e 	bl	800014c <IsButtonPress>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d102      	bne.n	800053c <fsm_automatic+0x110>
					statusLED = MAN_YELLOW_RED;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <fsm_automatic+0x158>)
 8000538:	2218      	movs	r2, #24
 800053a:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDA <= 0 && countDownLEDB <= 0){
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <fsm_automatic+0x164>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	dc0e      	bgt.n	8000562 <fsm_automatic+0x136>
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <fsm_automatic+0x15c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dc0a      	bgt.n	8000562 <fsm_automatic+0x136>
					statusLED = RED_GREEN;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <fsm_automatic+0x158>)
 800054e:	220b      	movs	r2, #11
 8000550:	601a      	str	r2, [r3, #0]
					countDownLEDA = count_RED;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <fsm_automatic+0x16c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <fsm_automatic+0x164>)
 8000558:	6013      	str	r3, [r2, #0]
					countDownLEDB = count_GREEN;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <fsm_automatic+0x168>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <fsm_automatic+0x15c>)
 8000560:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 8000562:	f7ff fef5 	bl	8000350 <displayTraffic>
					countDownLEDA--;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <fsm_automatic+0x164>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <fsm_automatic+0x164>)
 800056e:	6013      	str	r3, [r2, #0]
					countDownLEDB--;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <fsm_automatic+0x15c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	4a04      	ldr	r2, [pc, #16]	; (8000588 <fsm_automatic+0x15c>)
 8000578:	6013      	str	r3, [r2, #0]
				break;
 800057a:	e000      	b.n	800057e <fsm_automatic+0x152>
	default:
		break;
 800057c:	bf00      	nop
		}
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000184 	.word	0x20000184
 8000588:	2000015c 	.word	0x2000015c
 800058c:	2000004c 	.word	0x2000004c
 8000590:	2000016c 	.word	0x2000016c
 8000594:	20000048 	.word	0x20000048
 8000598:	20000044 	.word	0x20000044

0800059c <fsm_manual>:
 *      Author: Hy
 */

#include "fsm_manual.h"

void fsm_manual(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	switch(statusLED){
 80005a0:	4b42      	ldr	r3, [pc, #264]	; (80006ac <fsm_manual+0x110>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b15      	subs	r3, #21
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d87e      	bhi.n	80006a8 <fsm_manual+0x10c>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <fsm_manual+0x14>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005fb 	.word	0x080005fb
 80005b8:	08000635 	.word	0x08000635
 80005bc:	0800066f 	.word	0x0800066f
	case MAN_RED_GREEN:
		if(IsButtonPress(1) == 1){
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fdc3 	bl	800014c <IsButtonPress>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d102      	bne.n	80005d2 <fsm_manual+0x36>
			statusLED = MAN_RED_YELLOW;
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <fsm_manual+0x110>)
 80005ce:	2216      	movs	r2, #22
 80005d0:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff fdd4 	bl	8000180 <IsButtonLongPress>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10a      	bne.n	80005f4 <fsm_manual+0x58>
			statusLED = RED_GREEN;
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <fsm_manual+0x110>)
 80005e0:	220b      	movs	r2, #11
 80005e2:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_RED;
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <fsm_manual+0x114>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a32      	ldr	r2, [pc, #200]	; (80006b4 <fsm_manual+0x118>)
 80005ea:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_GREEN;
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <fsm_manual+0x11c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a32      	ldr	r2, [pc, #200]	; (80006bc <fsm_manual+0x120>)
 80005f2:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 80005f4:	f7ff feac 	bl	8000350 <displayTraffic>
		break;
 80005f8:	e056      	b.n	80006a8 <fsm_manual+0x10c>
	case MAN_RED_YELLOW:
		if(IsButtonPress(1) == 1){
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff fda6 	bl	800014c <IsButtonPress>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d102      	bne.n	800060c <fsm_manual+0x70>
			statusLED = MAN_GREEN_RED;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <fsm_manual+0x110>)
 8000608:	2217      	movs	r2, #23
 800060a:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 800060c:	2002      	movs	r0, #2
 800060e:	f7ff fdb7 	bl	8000180 <IsButtonLongPress>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10a      	bne.n	800062e <fsm_manual+0x92>
			statusLED = RED_YELLOW;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <fsm_manual+0x110>)
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_YELLOW;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <fsm_manual+0x124>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <fsm_manual+0x118>)
 8000624:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_YELLOW;
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <fsm_manual+0x124>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a24      	ldr	r2, [pc, #144]	; (80006bc <fsm_manual+0x120>)
 800062c:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 800062e:	f7ff fe8f 	bl	8000350 <displayTraffic>

		break;
 8000632:	e039      	b.n	80006a8 <fsm_manual+0x10c>
	case MAN_GREEN_RED:
		if(IsButtonPress(1) == 1){
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff fd89 	bl	800014c <IsButtonPress>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d102      	bne.n	8000646 <fsm_manual+0xaa>
			statusLED = MAN_YELLOW_RED;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <fsm_manual+0x110>)
 8000642:	2218      	movs	r2, #24
 8000644:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fd9a 	bl	8000180 <IsButtonLongPress>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d10a      	bne.n	8000668 <fsm_manual+0xcc>
			statusLED = GREEN_RED;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <fsm_manual+0x110>)
 8000654:	220d      	movs	r2, #13
 8000656:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_GREEN;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <fsm_manual+0x11c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <fsm_manual+0x118>)
 800065e:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_RED;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <fsm_manual+0x114>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <fsm_manual+0x120>)
 8000666:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 8000668:	f7ff fe72 	bl	8000350 <displayTraffic>

		break;
 800066c:	e01c      	b.n	80006a8 <fsm_manual+0x10c>
	case MAN_YELLOW_RED:
		if(IsButtonPress(1) == 1){
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fd6c 	bl	800014c <IsButtonPress>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d102      	bne.n	8000680 <fsm_manual+0xe4>
			statusLED = MAN_RED_GREEN;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <fsm_manual+0x110>)
 800067c:	2215      	movs	r2, #21
 800067e:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 8000680:	2002      	movs	r0, #2
 8000682:	f7ff fd7d 	bl	8000180 <IsButtonLongPress>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10a      	bne.n	80006a2 <fsm_manual+0x106>
			statusLED = YELLOW_RED;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <fsm_manual+0x110>)
 800068e:	220e      	movs	r2, #14
 8000690:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_YELLOW;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <fsm_manual+0x124>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <fsm_manual+0x118>)
 8000698:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_YELLOW;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <fsm_manual+0x124>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <fsm_manual+0x120>)
 80006a0:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 80006a2:	f7ff fe55 	bl	8000350 <displayTraffic>

		break;
 80006a6:	bf00      	nop
	}
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000184 	.word	0x20000184
 80006b0:	20000044 	.word	0x20000044
 80006b4:	2000016c 	.word	0x2000016c
 80006b8:	20000048 	.word	0x20000048
 80006bc:	2000015c 	.word	0x2000015c
 80006c0:	2000004c 	.word	0x2000004c

080006c4 <fsm_mode>:
int count_RED = 5;
int count_GREEN = 3;
int count_YELLOW = 2;


void fsm_mode(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	switch(status_mode){
 80006c8:	4b6b      	ldr	r3, [pc, #428]	; (8000878 <fsm_mode+0x1b4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	f200 80c8 	bhi.w	8000862 <fsm_mode+0x19e>
 80006d2:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <fsm_mode+0x14>)
 80006d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d8:	080006ed 	.word	0x080006ed
 80006dc:	0800071b 	.word	0x0800071b
 80006e0:	08000731 	.word	0x08000731
 80006e4:	08000797 	.word	0x08000797
 80006e8:	080007fd 	.word	0x080007fd
	case INIT:
		status_mode = MODE1;
 80006ec:	4b62      	ldr	r3, [pc, #392]	; (8000878 <fsm_mode+0x1b4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
		countDownA=count_RED;
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <fsm_mode+0x1b8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a62      	ldr	r2, [pc, #392]	; (8000880 <fsm_mode+0x1bc>)
 80006f8:	6013      	str	r3, [r2, #0]
		countDownB=count_GREEN;
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <fsm_mode+0x1c0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a62      	ldr	r2, [pc, #392]	; (8000888 <fsm_mode+0x1c4>)
 8000700:	6013      	str	r3, [r2, #0]
		statusLED = RED_GREEN;
 8000702:	4b62      	ldr	r3, [pc, #392]	; (800088c <fsm_mode+0x1c8>)
 8000704:	220b      	movs	r2, #11
 8000706:	601a      	str	r2, [r3, #0]
		countDownLEDA=count_RED;
 8000708:	4b5c      	ldr	r3, [pc, #368]	; (800087c <fsm_mode+0x1b8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a60      	ldr	r2, [pc, #384]	; (8000890 <fsm_mode+0x1cc>)
 800070e:	6013      	str	r3, [r2, #0]
		countDownLEDB=count_GREEN;
 8000710:	4b5c      	ldr	r3, [pc, #368]	; (8000884 <fsm_mode+0x1c0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a5f      	ldr	r2, [pc, #380]	; (8000894 <fsm_mode+0x1d0>)
 8000716:	6013      	str	r3, [r2, #0]
		break;
 8000718:	e0ac      	b.n	8000874 <fsm_mode+0x1b0>
	case MODE1:
		if(IsButtonPress(1) == 1){
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fd16 	bl	800014c <IsButtonPress>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	f040 809f 	bne.w	8000866 <fsm_mode+0x1a2>
			status_mode = MODE2;
 8000728:	4b53      	ldr	r3, [pc, #332]	; (8000878 <fsm_mode+0x1b4>)
 800072a:	2202      	movs	r2, #2
 800072c:	601a      	str	r2, [r3, #0]
		}
		break;
 800072e:	e09a      	b.n	8000866 <fsm_mode+0x1a2>
	case MODE2:
		statusLED = MODE2;
 8000730:	4b56      	ldr	r3, [pc, #344]	; (800088c <fsm_mode+0x1c8>)
 8000732:	2202      	movs	r2, #2
 8000734:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff fd08 	bl	800014c <IsButtonPress>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d102      	bne.n	8000748 <fsm_mode+0x84>
			status_mode = MODE3;
 8000742:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <fsm_mode+0x1b4>)
 8000744:	2203      	movs	r2, #3
 8000746:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff fcff 	bl	800014c <IsButtonPress>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d104      	bne.n	800075e <fsm_mode+0x9a>
			// add value
			countTemp+=1;
 8000754:	4b50      	ldr	r3, [pc, #320]	; (8000898 <fsm_mode+0x1d4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <fsm_mode+0x1d4>)
 800075c:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonLongPress(2) == 1){
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fd0e 	bl	8000180 <IsButtonLongPress>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d104      	bne.n	8000774 <fsm_mode+0xb0>
			// subtract value
			countTemp-=1;
 800076a:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <fsm_mode+0x1d4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	4a49      	ldr	r2, [pc, #292]	; (8000898 <fsm_mode+0x1d4>)
 8000772:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff fce9 	bl	800014c <IsButtonPress>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d174      	bne.n	800086a <fsm_mode+0x1a6>
			//set value
			count_RED += countTemp;
 8000780:	4b3e      	ldr	r3, [pc, #248]	; (800087c <fsm_mode+0x1b8>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b44      	ldr	r3, [pc, #272]	; (8000898 <fsm_mode+0x1d4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4413      	add	r3, r2
 800078a:	4a3c      	ldr	r2, [pc, #240]	; (800087c <fsm_mode+0x1b8>)
 800078c:	6013      	str	r3, [r2, #0]
			countTemp=0;
 800078e:	4b42      	ldr	r3, [pc, #264]	; (8000898 <fsm_mode+0x1d4>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
		}
		break;
 8000794:	e069      	b.n	800086a <fsm_mode+0x1a6>
	case MODE3:
		statusLED = MODE3;
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <fsm_mode+0x1c8>)
 8000798:	2203      	movs	r2, #3
 800079a:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff fcd5 	bl	800014c <IsButtonPress>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d102      	bne.n	80007ae <fsm_mode+0xea>
			status_mode = MODE4;
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <fsm_mode+0x1b4>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff fccc 	bl	800014c <IsButtonPress>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d104      	bne.n	80007c4 <fsm_mode+0x100>
			// add value
			countTemp+=1;
 80007ba:	4b37      	ldr	r3, [pc, #220]	; (8000898 <fsm_mode+0x1d4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a35      	ldr	r2, [pc, #212]	; (8000898 <fsm_mode+0x1d4>)
 80007c2:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonLongPress(2) == 1){
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff fcdb 	bl	8000180 <IsButtonLongPress>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d104      	bne.n	80007da <fsm_mode+0x116>
			// subtract value
			countTemp-=1;
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <fsm_mode+0x1d4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a30      	ldr	r2, [pc, #192]	; (8000898 <fsm_mode+0x1d4>)
 80007d8:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 80007da:	2003      	movs	r0, #3
 80007dc:	f7ff fcb6 	bl	800014c <IsButtonPress>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d143      	bne.n	800086e <fsm_mode+0x1aa>
			//set value
			count_YELLOW += countTemp;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <fsm_mode+0x1d8>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <fsm_mode+0x1d4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <fsm_mode+0x1d8>)
 80007f2:	6013      	str	r3, [r2, #0]
			countTemp=0;
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <fsm_mode+0x1d4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007fa:	e038      	b.n	800086e <fsm_mode+0x1aa>
	case MODE4:
		statusLED = MODE4;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <fsm_mode+0x1c8>)
 80007fe:	2204      	movs	r2, #4
 8000800:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fca2 	bl	800014c <IsButtonPress>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d102      	bne.n	8000814 <fsm_mode+0x150>
			status_mode = MODE1;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <fsm_mode+0x1b4>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fc99 	bl	800014c <IsButtonPress>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d104      	bne.n	800082a <fsm_mode+0x166>
			// add value
			countTemp+=1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <fsm_mode+0x1d4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <fsm_mode+0x1d4>)
 8000828:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonLongPress(2) == 1){
 800082a:	2002      	movs	r0, #2
 800082c:	f7ff fca8 	bl	8000180 <IsButtonLongPress>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d104      	bne.n	8000840 <fsm_mode+0x17c>
			// subtract value
			countTemp-=1;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <fsm_mode+0x1d4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a16      	ldr	r2, [pc, #88]	; (8000898 <fsm_mode+0x1d4>)
 800083e:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000840:	2003      	movs	r0, #3
 8000842:	f7ff fc83 	bl	800014c <IsButtonPress>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d112      	bne.n	8000872 <fsm_mode+0x1ae>
			//set value
			count_GREEN += countTemp;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <fsm_mode+0x1c0>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <fsm_mode+0x1d4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4413      	add	r3, r2
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <fsm_mode+0x1c0>)
 8000858:	6013      	str	r3, [r2, #0]
			countTemp=0;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <fsm_mode+0x1d4>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000860:	e007      	b.n	8000872 <fsm_mode+0x1ae>
	default:
		break;
 8000862:	bf00      	nop
 8000864:	e006      	b.n	8000874 <fsm_mode+0x1b0>
		break;
 8000866:	bf00      	nop
 8000868:	e004      	b.n	8000874 <fsm_mode+0x1b0>
		break;
 800086a:	bf00      	nop
 800086c:	e002      	b.n	8000874 <fsm_mode+0x1b0>
		break;
 800086e:	bf00      	nop
 8000870:	e000      	b.n	8000874 <fsm_mode+0x1b0>
		break;
 8000872:	bf00      	nop
	}
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000008c 	.word	0x2000008c
 800087c:	20000044 	.word	0x20000044
 8000880:	2000017c 	.word	0x2000017c
 8000884:	20000048 	.word	0x20000048
 8000888:	20000180 	.word	0x20000180
 800088c:	20000184 	.word	0x20000184
 8000890:	2000016c 	.word	0x2000016c
 8000894:	2000015c 	.word	0x2000015c
 8000898:	20000088 	.word	0x20000088
 800089c:	2000004c 	.word	0x2000004c

080008a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f023 030f 	bic.w	r3, r3, #15
 80008b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	f043 030c 	orr.w	r3, r3, #12
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	f043 030c 	orr.w	r3, r3, #12
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008e0:	f107 0208 	add.w	r2, r7, #8
 80008e4:	2364      	movs	r3, #100	; 0x64
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2304      	movs	r3, #4
 80008ea:	2142      	movs	r1, #66	; 0x42
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <lcd_send_cmd+0x5c>)
 80008ee:	f001 fa29 	bl	8001d44 <HAL_I2C_Master_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000188 	.word	0x20000188

08000900 <lcd_init>:
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000904:	2033      	movs	r0, #51	; 0x33
 8000906:	f7ff ffcb 	bl	80008a0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f7ff ffc8 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000910:	2032      	movs	r0, #50	; 0x32
 8000912:	f000 fdb3 	bl	800147c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000916:	2028      	movs	r0, #40	; 0x28
 8000918:	f7ff ffc2 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	f000 fdad 	bl	800147c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff ffbc 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000928:	2032      	movs	r0, #50	; 0x32
 800092a:	f000 fda7 	bl	800147c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ffb6 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000934:	2032      	movs	r0, #50	; 0x32
 8000936:	f000 fda1 	bl	800147c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800093a:	200c      	movs	r0, #12
 800093c:	f7ff ffb0 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f000 fd9b 	bl	800147c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff ffaa 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 fd95 	bl	800147c <HAL_Delay>
	lcd_send_cmd (0x80);
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	f7ff ffa4 	bl	80008a0 <lcd_send_cmd>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <ledtest>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledtest() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000960:	2120      	movs	r1, #32
 8000962:	4802      	ldr	r0, [pc, #8]	; (800096c <ledtest+0x10>)
 8000964:	f001 f86f 	bl	8001a46 <HAL_GPIO_TogglePin>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010800 	.word	0x40010800

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fd20 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f830 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f912 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000980:	f000 f8e6 	bl	8000b50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000984:	f000 f898 	bl	8000ab8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000988:	f000 f868 	bl	8000a5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800098c:	f7ff ffb8 	bl	8000900 <lcd_init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <main+0x58>)
 8000992:	f002 f98d 	bl	8002cb0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Init();
 8000996:	f000 f9bd 	bl	8000d14 <SCH_Init>
	SCH_Add_Task(ledtest, 0, 100);
 800099a:	2264      	movs	r2, #100	; 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <main+0x5c>)
 80009a0:	f000 fa1e 	bl	8000de0 <SCH_Add_Task>

	SCH_Add_Task(fsm_automatic, 0, 100);
 80009a4:	2264      	movs	r2, #100	; 0x64
 80009a6:	2100      	movs	r1, #0
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <main+0x60>)
 80009aa:	f000 fa19 	bl	8000de0 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual, 0, 100);
 80009ae:	2264      	movs	r2, #100	; 0x64
 80009b0:	2100      	movs	r1, #0
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <main+0x64>)
 80009b4:	f000 fa14 	bl	8000de0 <SCH_Add_Task>
	SCH_Add_Task(fsm_mode, 0, 100);
 80009b8:	2264      	movs	r2, #100	; 0x64
 80009ba:	2100      	movs	r1, #0
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <main+0x68>)
 80009be:	f000 fa0f 	bl	8000de0 <SCH_Add_Task>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_Dispatch_Tasks();
 80009c2:	f000 fb77 	bl	80010b4 <SCH_Dispatch_Tasks>
 80009c6:	e7fc      	b.n	80009c2 <main+0x52>
 80009c8:	200001dc 	.word	0x200001dc
 80009cc:	0800095d 	.word	0x0800095d
 80009d0:	0800042d 	.word	0x0800042d
 80009d4:	0800059d 	.word	0x0800059d
 80009d8:	080006c5 	.word	0x080006c5

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b090      	sub	sp, #64	; 0x40
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2228      	movs	r2, #40	; 0x28
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fe04 	bl	80035f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fcea 	bl	80023f4 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000a26:	f000 f96f 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 ff55 	bl	80028f4 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a50:	f000 f95a 	bl	8000d08 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3740      	adds	r7, #64	; 0x40
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C1_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a9a:	f001 f80f 	bl	8001abc <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 f930 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000188 	.word	0x20000188
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000ade:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ae2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000aec:	2209      	movs	r2, #9
 8000aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000afe:	f002 f887 	bl	8002c10 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b08:	f000 f8fe 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000b1a:	f002 fa0b 	bl	8002f34 <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b24:	f000 f8f0 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_TIM2_Init+0x94>)
 8000b36:	f002 fbed 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f8e2 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200001dc 	.word	0x200001dc

08000b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_USART2_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b88:	f002 fc34 	bl	80033f4 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f000 f8b9 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000224 	.word	0x20000224
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd0:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a41      	ldr	r2, [pc, #260]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a3b      	ldr	r2, [pc, #236]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a35      	ldr	r2, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_GPIO_Init+0x138>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c1e:	4830      	ldr	r0, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0x13c>)
 8000c20:	f000 fef9 	bl	8001a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000c2a:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0x140>)
 8000c2c:	f000 fef3 	bl	8001a16 <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	482c      	ldr	r0, [pc, #176]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000c36:	f000 feee 	bl	8001a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_GPIO_Init+0x148>)
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000c50:	f000 fd46 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8000c54:	2303      	movs	r3, #3
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0x13c>)
 8000c68:	f000 fd3a 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|D7_Pin|D8_Pin;
 8000c6c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <MX_GPIO_Init+0x13c>)
 8000c86:	f000 fd2b 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000c8a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000c8e:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <MX_GPIO_Init+0x140>)
 8000ca4:	f000 fd1c 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <MX_GPIO_Init+0x144>)
 8000cc0:	f000 fd0e 	bl	80016e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2028      	movs	r0, #40	; 0x28
 8000cca:	f000 fcd2 	bl	8001672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f000 fceb 	bl	80016aa <HAL_NVIC_EnableIRQ>

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	10110000 	.word	0x10110000

08000cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000cf8:	f000 f852 	bl	8000da0 <SCH_Update>
//	timerun();
	getKeyInput();
 8000cfc:	f7ff fa98 	bl	8000230 <getKeyInput>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <SCH_Init>:


static uint32_t Get_New_Task_ID(void);


void SCH_Init(void){
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	e034      	b.n	8000d8a <SCH_Init+0x76>
        SCH_tasks_Array[i].pTask = 0;
 8000d20:	491e      	ldr	r1, [pc, #120]	; (8000d9c <SCH_Init+0x88>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].Delay = 0;
 8000d32:	491a      	ldr	r1, [pc, #104]	; (8000d9c <SCH_Init+0x88>)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	440b      	add	r3, r1
 8000d40:	3304      	adds	r3, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].Period = 0;
 8000d46:	4915      	ldr	r1, [pc, #84]	; (8000d9c <SCH_Init+0x88>)
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	3308      	adds	r3, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].RunMe = 0;
 8000d5a:	4910      	ldr	r1, [pc, #64]	; (8000d9c <SCH_Init+0x88>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	330c      	adds	r3, #12
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]

        SCH_tasks_Array[i].TaskID = -1;
 8000d6e:	490b      	ldr	r1, [pc, #44]	; (8000d9c <SCH_Init+0x88>)
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	3310      	adds	r3, #16
 8000d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d82:	601a      	str	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	ddc7      	ble.n	8000d20 <SCH_Init+0xc>
    }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000090 	.word	0x20000090

08000da0 <SCH_Update>:

void SCH_Update(){
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	if (SCH_tasks_Array[0].pTask && SCH_tasks_Array[0].RunMe == 0) {
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <SCH_Update+0x3c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d013      	beq.n	8000dd4 <SCH_Update+0x34>
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <SCH_Update+0x3c>)
 8000dae:	7b1b      	ldrb	r3, [r3, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10f      	bne.n	8000dd4 <SCH_Update+0x34>
		if(SCH_tasks_Array[0].Delay > 0){
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <SCH_Update+0x3c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <SCH_Update+0x26>
			SCH_tasks_Array[0].Delay = SCH_tasks_Array[0].Delay - 1;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <SCH_Update+0x3c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <SCH_Update+0x3c>)
 8000dc4:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_Array[0].Delay == 0) {
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SCH_Update+0x3c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d102      	bne.n	8000dd4 <SCH_Update+0x34>
			SCH_tasks_Array[0].RunMe = 1;
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <SCH_Update+0x3c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000090 	.word	0x20000090

08000de0 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b093      	sub	sp, #76	; 0x4c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
    uint8_t newTaskIndex = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t sumDelay = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t newDelay = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38

    // Iterate through the task array to find the appropriate position for the new task
    for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000e00:	e0d5      	b.n	8000fae <SCH_Add_Task+0x1ce>
        // Calculate the cumulative delay of existing tasks
        sumDelay += SCH_tasks_Array[newTaskIndex].Delay;
 8000e02:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e06:	496e      	ldr	r1, [pc, #440]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e18:	4413      	add	r3, r2
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40

        // Check if the cumulative delay is greater than the specified initial delay (DELAY)
        if (sumDelay > DELAY) {
 8000e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d979      	bls.n	8000f18 <SCH_Add_Task+0x138>
            // Calculate the new delay for the current task
            newDelay = DELAY - (sumDelay - SCH_tasks_Array[newTaskIndex].Delay);
 8000e24:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e28:	4965      	ldr	r1, [pc, #404]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	3304      	adds	r3, #4
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	4413      	add	r3, r2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38

            // Adjust the delay of the current task and shift existing tasks to make room
            SCH_tasks_Array[newTaskIndex].Delay = sumDelay - DELAY;
 8000e42:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	485c      	ldr	r0, [pc, #368]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4403      	add	r3, r0
 8000e58:	3304      	adds	r3, #4
 8000e5a:	6019      	str	r1, [r3, #0]
            for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--) {
 8000e5c:	2309      	movs	r3, #9
 8000e5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000e62:	e01b      	b.n	8000e9c <SCH_Add_Task+0xbc>
                SCH_tasks_Array[i] = SCH_tasks_Array[i - 1];
 8000e64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8000e6e:	4854      	ldr	r0, [pc, #336]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000e70:	460b      	mov	r3, r1
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4418      	add	r0, r3
 8000e7a:	4951      	ldr	r1, [pc, #324]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	4604      	mov	r4, r0
 8000e88:	461d      	mov	r5, r3
 8000e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8e:	682b      	ldr	r3, [r5, #0]
 8000e90:	6023      	str	r3, [r4, #0]
            for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--) {
 8000e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000e9c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8dd      	bhi.n	8000e64 <SCH_Add_Task+0x84>
            }

            // Add the new task at the appropriate position in the array
            SCH_tasks_Array[newTaskIndex] = (sTask){
 8000ea8:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
                .pTask = pFunction,
                .Delay = newDelay,
                .Period = PERIOD,
                .RunMe = (newDelay == 0),  // Set RunMe flag based on newDelay
 8000eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf0c      	ite	eq
 8000eb2:	2301      	moveq	r3, #1
 8000eb4:	2300      	movne	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461d      	mov	r5, r3
                .TaskID = Get_New_Task_ID(),  // Assign a unique TaskID
 8000eba:	f000 f923 	bl	8001104 <Get_New_Task_ID>
 8000ebe:	4601      	mov	r1, r0
            SCH_tasks_Array[newTaskIndex] = (sTask){
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4423      	add	r3, r4
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4a3b      	ldr	r2, [pc, #236]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4423      	add	r3, r4
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3304      	adds	r3, #4
 8000ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	4a37      	ldr	r2, [pc, #220]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000ee4:	4623      	mov	r3, r4
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4423      	add	r3, r4
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	3308      	adds	r3, #8
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4423      	add	r3, r4
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	330c      	adds	r3, #12
 8000f02:	462a      	mov	r2, r5
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f08:	4623      	mov	r3, r4
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4423      	add	r3, r4
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3310      	adds	r3, #16
 8000f14:	6019      	str	r1, [r3, #0]
 8000f16:	e04f      	b.n	8000fb8 <SCH_Add_Task+0x1d8>
            };

            return;
        } else {
            // If the current task slot is empty, add the new task to this slot
            if (SCH_tasks_Array[newTaskIndex].pTask == 0) {
 8000f18:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000f1c:	4928      	ldr	r1, [pc, #160]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d13a      	bne.n	8000fa4 <SCH_Add_Task+0x1c4>
                SCH_tasks_Array[newTaskIndex] = (sTask){
 8000f2e:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
                    .pTask = pFunction,
                    .Delay = DELAY - sumDelay,
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f36:	1ad5      	subs	r5, r2, r3
                    .Period = PERIOD,
                    .RunMe = (DELAY - sumDelay == 0),  // Set RunMe flag based on remaining delay
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461e      	mov	r6, r3
                    .TaskID = Get_New_Task_ID(),  // Assign a unique TaskID
 8000f48:	f000 f8dc 	bl	8001104 <Get_New_Task_ID>
 8000f4c:	4601      	mov	r1, r0
                SCH_tasks_Array[newTaskIndex] = (sTask){
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f50:	4623      	mov	r3, r4
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4423      	add	r3, r4
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f60:	4623      	mov	r3, r4
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4423      	add	r3, r4
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	601d      	str	r5, [r3, #0]
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f70:	4623      	mov	r3, r4
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4423      	add	r3, r4
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f82:	4623      	mov	r3, r4
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4423      	add	r3, r4
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	4632      	mov	r2, r6
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <SCH_Add_Task+0x1e0>)
 8000f94:	4623      	mov	r3, r4
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4423      	add	r3, r4
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3310      	adds	r3, #16
 8000fa0:	6019      	str	r1, [r3, #0]
 8000fa2:	e009      	b.n	8000fb8 <SCH_Add_Task+0x1d8>
    for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8000fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000fae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	f67f af25 	bls.w	8000e02 <SCH_Add_Task+0x22>

                return;
            }
        }
    }
}
 8000fb8:	374c      	adds	r7, #76	; 0x4c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000090 	.word	0x20000090

08000fc4 <SCH_Delete_Task>:



void SCH_Delete_Task(uint32_t taskID) {
 8000fc4:	b4b0      	push	{r4, r5, r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    // Check if the provided task ID is NO_TASK_ID (invalid).
    if (taskID == NO_TASK_ID) return;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d068      	beq.n	80010a4 <SCH_Delete_Task+0xe0>

    // Iterate through the task array to find the task with the specified TaskID
    for (uint8_t taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	77fb      	strb	r3, [r7, #31]
 8000fd6:	e061      	b.n	800109c <SCH_Delete_Task+0xd8>
        if (SCH_tasks_Array[taskIndex].TaskID == taskID) {
 8000fd8:	7ffa      	ldrb	r2, [r7, #31]
 8000fda:	4935      	ldr	r1, [pc, #212]	; (80010b0 <SCH_Delete_Task+0xec>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3310      	adds	r3, #16
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d152      	bne.n	8001096 <SCH_Delete_Task+0xd2>
            // Task found, proceed with deletion

            // If the current task is not the last one and the next task is not empty,
            // adjust the delay of the next task to include the delay of the deleted task.
            if (taskIndex < SCH_MAX_TASKS - 1 && SCH_tasks_Array[taskIndex + 1].pTask != 0) {
 8000ff0:	7ffb      	ldrb	r3, [r7, #31]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d828      	bhi.n	8001048 <SCH_Delete_Task+0x84>
 8000ff6:	7ffb      	ldrb	r3, [r7, #31]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	492d      	ldr	r1, [pc, #180]	; (80010b0 <SCH_Delete_Task+0xec>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01d      	beq.n	8001048 <SCH_Delete_Task+0x84>
                SCH_tasks_Array[taskIndex + 1].Delay += SCH_tasks_Array[taskIndex].Delay;
 800100c:	7ffb      	ldrb	r3, [r7, #31]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	4927      	ldr	r1, [pc, #156]	; (80010b0 <SCH_Delete_Task+0xec>)
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3304      	adds	r3, #4
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	7ffa      	ldrb	r2, [r7, #31]
 8001022:	4823      	ldr	r0, [pc, #140]	; (80010b0 <SCH_Delete_Task+0xec>)
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4403      	add	r3, r0
 800102e:	3304      	adds	r3, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	7ffa      	ldrb	r2, [r7, #31]
 8001034:	3201      	adds	r2, #1
 8001036:	4419      	add	r1, r3
 8001038:	481d      	ldr	r0, [pc, #116]	; (80010b0 <SCH_Delete_Task+0xec>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4403      	add	r3, r0
 8001044:	3304      	adds	r3, #4
 8001046:	6019      	str	r1, [r3, #0]
            }

            // Shift the remaining tasks to fill the gap created by the deleted task
            for (uint8_t j = taskIndex; j < SCH_MAX_TASKS - 1; j++) {
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	77bb      	strb	r3, [r7, #30]
 800104c:	e017      	b.n	800107e <SCH_Delete_Task+0xba>
                SCH_tasks_Array[j] = SCH_tasks_Array[j + 1];
 800104e:	7fbb      	ldrb	r3, [r7, #30]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	7fb9      	ldrb	r1, [r7, #30]
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <SCH_Delete_Task+0xec>)
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4418      	add	r0, r3
 8001060:	4913      	ldr	r1, [pc, #76]	; (80010b0 <SCH_Delete_Task+0xec>)
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	4604      	mov	r4, r0
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	6023      	str	r3, [r4, #0]
            for (uint8_t j = taskIndex; j < SCH_MAX_TASKS - 1; j++) {
 8001078:	7fbb      	ldrb	r3, [r7, #30]
 800107a:	3301      	adds	r3, #1
 800107c:	77bb      	strb	r3, [r7, #30]
 800107e:	7fbb      	ldrb	r3, [r7, #30]
 8001080:	2b08      	cmp	r3, #8
 8001082:	d9e4      	bls.n	800104e <SCH_Delete_Task+0x8a>
            }

            // Clear the last task slot to ensure no leftover data
            SCH_tasks_Array[SCH_MAX_TASKS - 1] = (sTask){0};
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <SCH_Delete_Task+0xec>)
 8001086:	33b4      	adds	r3, #180	; 0xb4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	e007      	b.n	80010a6 <SCH_Delete_Task+0xe2>
    for (uint8_t taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++) {
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	3301      	adds	r3, #1
 800109a:	77fb      	strb	r3, [r7, #31]
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	2b09      	cmp	r3, #9
 80010a0:	d99a      	bls.n	8000fd8 <SCH_Delete_Task+0x14>

            return;
        }
    }

    return; // Task ID not found, exit the function
 80010a2:	e000      	b.n	80010a6 <SCH_Delete_Task+0xe2>
    if (taskID == NO_TASK_ID) return;
 80010a4:	bf00      	nop
}
 80010a6:	3724      	adds	r7, #36	; 0x24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bcb0      	pop	{r4, r5, r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000090 	.word	0x20000090

080010b4 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(){
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
	if(SCH_tasks_Array[0].RunMe > 0) {
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <SCH_Dispatch_Tasks+0x4c>)
 80010bc:	7b1b      	ldrb	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d019      	beq.n	80010f6 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_Array[0].pTask)(); // Function pointer -> Run task
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <SCH_Dispatch_Tasks+0x4c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4798      	blx	r3
		SCH_tasks_Array[0].RunMe = 0; // Set back RunMe flag
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <SCH_Dispatch_Tasks+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_Array[0];
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <SCH_Dispatch_Tasks+0x4c>)
 80010d0:	1d3c      	adds	r4, r7, #4
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff70 	bl	8000fc4 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68f9      	ldr	r1, [r7, #12]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe75 	bl	8000de0 <SCH_Add_Task>
		}
	}
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000090 	.word	0x20000090

08001104 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID() {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
    return ++newTaskID;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <Get_New_Task_ID+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <Get_New_Task_ID+0x1c>)
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <Get_New_Task_ID+0x1c>)
 8001114:	681b      	ldr	r3, [r3, #0]
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000158 	.word	0x20000158

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_MspInit+0x5c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x5c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_MspInit+0x60>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_MspInit+0x60>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_I2C_MspInit+0x90>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d132      	bne.n	800120e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <HAL_I2C_MspInit+0x98>)
 80011d6:	f000 fa83 	bl	80016e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_I2C_MspInit+0x9c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_I2C_MspInit+0x9c>)
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_I2C_MspInit+0x94>)
 80011fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_I2C_MspInit+0x94>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40005400 	.word	0x40005400
 800121c:	40021000 	.word	0x40021000
 8001220:	40010c00 	.word	0x40010c00
 8001224:	40010000 	.word	0x40010000

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fa0b 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fa24 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x70>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d123      	bne.n	80012d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0x74>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_UART_MspInit+0x74>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129a:	61d3      	str	r3, [r2, #28]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_UART_MspInit+0x74>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_UART_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_UART_MspInit+0x74>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_UART_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012c0:	230c      	movs	r3, #12
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_UART_MspInit+0x78>)
 80012d4:	f000 fa04 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001332:	f000 f887 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM2_IRQHandler+0x10>)
 8001342:	f001 fd07 	bl	8002d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001dc 	.word	0x200001dc

08001350 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001354:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001358:	f000 fb8e 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800136c:	f7ff fff8 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001372:	490c      	ldr	r1, [pc, #48]	; (80013a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001388:	4c09      	ldr	r4, [pc, #36]	; (80013b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f002 f90b 	bl	80035b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff fae9 	bl	8000970 <main>
  bx lr
 800139e:	4770      	bx	lr
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013a8:	08003654 	.word	0x08003654
  ldr r2, =_sbss
 80013ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013b0:	20000270 	.word	0x20000270

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_Init+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_Init+0x28>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f947 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fea6 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f95f 	bl	80016c6 <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f927 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000050 	.word	0x20000050
 800143c:	20000058 	.word	0x20000058
 8001440:	20000054 	.word	0x20000054

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_IncTick+0x20>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000058 	.word	0x20000058
 8001464:	2000026c 	.word	0x2000026c

08001468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	2000026c 	.word	0x2000026c

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff fff0 	bl	8001468 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffe0 	bl	8001468 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000058 	.word	0x20000058

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <__NVIC_EnableIRQ+0x34>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff90 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff2d 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff42 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff90 	bl	80015b4 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5f 	bl	8001560 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff35 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e169      	b.n	80019c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8158 	bne.w	80019c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a9a      	ldr	r2, [pc, #616]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a96      	ldr	r2, [pc, #600]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a94      	ldr	r2, [pc, #592]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a94      	ldr	r2, [pc, #592]	; (800198c <HAL_GPIO_Init+0x2ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a92      	ldr	r2, [pc, #584]	; (800198c <HAL_GPIO_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a79      	ldr	r2, [pc, #484]	; (8001994 <HAL_GPIO_Init+0x2b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80b1 	beq.w	80019c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_GPIO_Init+0x2bc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	; (800199c <HAL_GPIO_Init+0x2bc>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	492c      	ldr	r1, [pc, #176]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4928      	ldr	r1, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491e      	ldr	r1, [pc, #120]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4918      	ldr	r1, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x2e2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40011400 	.word	0x40011400
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae8e 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	; 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a26:	787b      	ldrb	r3, [r7, #1]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	041a      	lsls	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	041a      	lsls	r2, r3, #16
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	400b      	ands	r3, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f806 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e12b      	b.n	8001d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fb50 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b20:	f001 f830 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8001b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a81      	ldr	r2, [pc, #516]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d807      	bhi.n	8001b40 <HAL_I2C_Init+0x84>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a80      	ldr	r2, [pc, #512]	; (8001d34 <HAL_I2C_Init+0x278>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	bf94      	ite	ls
 8001b38:	2301      	movls	r3, #1
 8001b3a:	2300      	movhi	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e006      	b.n	8001b4e <HAL_I2C_Init+0x92>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a7d      	ldr	r2, [pc, #500]	; (8001d38 <HAL_I2C_Init+0x27c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bf94      	ite	ls
 8001b48:	2301      	movls	r3, #1
 8001b4a:	2300      	movhi	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0e7      	b.n	8001d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a78      	ldr	r2, [pc, #480]	; (8001d3c <HAL_I2C_Init+0x280>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d802      	bhi.n	8001b90 <HAL_I2C_Init+0xd4>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	e009      	b.n	8001ba4 <HAL_I2C_Init+0xe8>
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <HAL_I2C_Init+0x284>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	495c      	ldr	r1, [pc, #368]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d819      	bhi.n	8001bf8 <HAL_I2C_Init+0x13c>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e59      	subs	r1, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bd8:	400b      	ands	r3, r1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_I2C_Init+0x138>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e59      	subs	r1, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf2:	e051      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e04f      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <HAL_I2C_Init+0x168>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e012      	b.n	8001c4a <HAL_I2C_Init+0x18e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Init+0x196>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e022      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10e      	bne.n	8001c78 <HAL_I2C_Init+0x1bc>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e58      	subs	r0, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c76:	e00f      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	0099      	lsls	r1, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	6809      	ldr	r1, [r1, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6911      	ldr	r1, [r2, #16]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68d2      	ldr	r2, [r2, #12]
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	001e847f 	.word	0x001e847f
 8001d38:	003d08ff 	.word	0x003d08ff
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	817b      	strh	r3, [r7, #10]
 8001d54:	4613      	mov	r3, r2
 8001d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fb86 	bl	8001468 <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	f040 80e0 	bne.w	8001f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2319      	movs	r3, #25
 8001d72:	2201      	movs	r2, #1
 8001d74:	4970      	ldr	r1, [pc, #448]	; (8001f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f964 	bl	8002044 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0d3      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x50>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e0cc      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d007      	beq.n	8001dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	; 0x21
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	893a      	ldrh	r2, [r7, #8]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dfc:	8979      	ldrh	r1, [r7, #10]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f89c 	bl	8001f40 <I2C_MasterRequestWrite>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e08d      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e28:	e066      	b.n	8001ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	6a39      	ldr	r1, [r7, #32]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa22 	bl	8002278 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06b      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d11b      	bne.n	8001ecc <HAL_I2C_Master_Transmit+0x188>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d017      	beq.n	8001ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	6a39      	ldr	r1, [r7, #32]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fa19 	bl	8002308 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00d      	beq.n	8001ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d107      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e01a      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d194      	bne.n	8001e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	00100002 	.word	0x00100002
 8001f3c:	ffff0000 	.word	0xffff0000

08001f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d006      	beq.n	8001f6a <I2C_MasterRequestWrite+0x2a>
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d003      	beq.n	8001f6a <I2C_MasterRequestWrite+0x2a>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f68:	d108      	bne.n	8001f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e00b      	b.n	8001f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	2b12      	cmp	r3, #18
 8001f82:	d107      	bne.n	8001f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f84f 	bl	8002044 <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fba:	d103      	bne.n	8001fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e035      	b.n	8002034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fd0:	d108      	bne.n	8001fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	e01b      	b.n	800201c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fe4:	897b      	ldrh	r3, [r7, #10]
 8001fe6:	11db      	asrs	r3, r3, #7
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 0306 	and.w	r3, r3, #6
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f063 030f 	orn	r3, r3, #15
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <I2C_MasterRequestWrite+0xfc>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f898 	bl	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e010      	b.n	8002034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <I2C_MasterRequestWrite+0x100>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f888 	bl	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	00010008 	.word	0x00010008
 8002040:	00010002 	.word	0x00010002

08002044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002054:	e048      	b.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d044      	beq.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff fa03 	bl	8001468 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d139      	bne.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10d      	bne.n	800209a <I2C_WaitOnFlagUntilTimeout+0x56>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	43da      	mvns	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4013      	ands	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	e00c      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	43da      	mvns	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4013      	ands	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d116      	bne.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e023      	b.n	8002130 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10d      	bne.n	800210e <I2C_WaitOnFlagUntilTimeout+0xca>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	e00c      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	43da      	mvns	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d093      	beq.n	8002056 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002146:	e071      	b.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d123      	bne.n	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e067      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d041      	beq.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7ff f95e 	bl	8001468 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d302      	bcc.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d136      	bne.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10c      	bne.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4013      	ands	r3, r2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	bf14      	ite	ne
 80021da:	2301      	movne	r3, #1
 80021dc:	2300      	moveq	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e00b      	b.n	80021fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	43da      	mvns	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e021      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10c      	bne.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	43da      	mvns	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e00b      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f47f af6d 	bne.w	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002284:	e034      	b.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f886 	bl	8002398 <I2C_IsAcknowledgeFailed>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e034      	b.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d028      	beq.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff f8e3 	bl	8001468 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11d      	bne.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d016      	beq.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e007      	b.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d1c3      	bne.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002314:	e034      	b.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f83e 	bl	8002398 <I2C_IsAcknowledgeFailed>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e034      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d028      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f89b 	bl	8001468 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11d      	bne.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d016      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d1c3      	bne.n	8002316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d11b      	bne.n	80023e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0204 	orr.w	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e26c      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x12c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e246      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x76>
 800245c:	4b80      	ldr	r3, [pc, #512]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7f      	ldr	r2, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7a      	ldr	r2, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a77      	ldr	r2, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xbc>
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a71      	ldr	r2, [pc, #452]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 80024b0:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a67      	ldr	r2, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe ffca 	bl	8001468 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe ffc6 	bl	8001468 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1fa      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe4>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe ffb6 	bl	8001468 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe ffb2 	bl	8001468 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1e6      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1ba      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4939      	ldr	r1, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe ff6b 	bl	8001468 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe ff67 	bl	8001468 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e19b      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4927      	ldr	r1, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff4a 	bl	8001468 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe ff46 	bl	8001468 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e17a      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03a      	beq.n	8002678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe ff2a 	bl	8001468 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe ff26 	bl	8001468 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e15a      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f000 facc 	bl	8002bd4 <RCC_Delay>
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe ff10 	bl	8001468 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	e00f      	b.n	800266c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264c:	f7fe ff0c 	bl	8001468 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d908      	bls.n	800266c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e140      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	42420000 	.word	0x42420000
 8002668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b9e      	ldr	r3, [pc, #632]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e9      	bne.n	800264c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a6 	beq.w	80027d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b97      	ldr	r3, [pc, #604]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a93      	ldr	r2, [pc, #588]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b8e      	ldr	r3, [pc, #568]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a8a      	ldr	r2, [pc, #552]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fecd 	bl	8001468 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe fec9 	bl	8001468 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0fd      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b81      	ldr	r3, [pc, #516]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e02d      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x334>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x356>
 8002730:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a66      	ldr	r2, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe fe7d 	bl	8001468 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fe79 	bl	8001468 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0ab      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x37e>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fe67 	bl	8001468 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fe63 	bl	8001468 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e095      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a47      	ldr	r2, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8081 	beq.w	80028de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d061      	beq.n	80028ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d146      	bne.n	800287e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fe37 	bl	8001468 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fe33 	bl	8001468 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e067      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	492d      	ldr	r1, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a19      	ldr	r1, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	430b      	orrs	r3, r1
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fe07 	bl	8001468 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fe03 	bl	8001468 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e037      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x46a>
 800287c:	e02f      	b.n	80028de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fdf0 	bl	8001468 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fdec 	bl	8001468 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e020      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x498>
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e013      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42420060 	.word	0x42420060

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d0      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4965      	ldr	r1, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800295a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d040      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d115      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e073      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4936      	ldr	r1, [pc, #216]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fd40 	bl	8001468 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7fe fd3c 	bl	8001468 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e053      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 020c 	and.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1eb      	bne.n	80029ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d210      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4922      	ldr	r1, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fc9e 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08003620 	.word	0x08003620
 8002ac0:	20000050 	.word	0x20000050
 8002ac4:	20000054 	.word	0x20000054

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x36>
 8002af6:	e027      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	613b      	str	r3, [r7, #16]
      break;
 8002afc:	e027      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2a:	fb02 f203 	mul.w	r2, r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e004      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	693b      	ldr	r3, [r7, #16]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	08003638 	.word	0x08003638
 8002b68:	08003648 	.word	0x08003648
 8002b6c:	003d0900 	.word	0x003d0900

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	20000050 	.word	0x20000050

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff2 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08003630 	.word	0x08003630

08002bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0adb      	lsrs	r3, r3, #11
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08003630 	.word	0x08003630

08002bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <RCC_Delay+0x34>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <RCC_Delay+0x38>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0a5b      	lsrs	r3, r3, #9
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf0:	bf00      	nop
  }
  while (Delay --);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	60fa      	str	r2, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f9      	bne.n	8002bf0 <RCC_Delay+0x1c>
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000050 	.word	0x20000050
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e041      	b.n	8002ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe faf6 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 fa5c 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e03a      	b.n	8002d3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_Base_Start_IT+0x98>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d010      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	e007      	b.n	8002d3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d020      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0202 	mvn.w	r2, #2
 8002d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f998 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f98b 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f99a 	bl	80030e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d020      	beq.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0204 	mvn.w	r2, #4
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f972 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f965 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f974 	bl	80030e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d020      	beq.n	8002e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0208 	mvn.w	r2, #8
 8002e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2204      	movs	r2, #4
 8002e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f94c 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f93f 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f94e 	bl	80030e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d020      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01b      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0210 	mvn.w	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2208      	movs	r2, #8
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f926 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f919 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f928 	bl	80030e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0201 	mvn.w	r2, #1
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd ff18 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa7f 	bl	80033e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8f8 	bl	80030f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0220 	mvn.w	r2, #32
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa52 	bl	80033d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIM_ConfigClockSource+0x1c>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0b4      	b.n	80030ba <HAL_TIM_ConfigClockSource+0x186>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f88:	d03e      	beq.n	8003008 <HAL_TIM_ConfigClockSource+0xd4>
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8e:	f200 8087 	bhi.w	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	f000 8086 	beq.w	80030a6 <HAL_TIM_ConfigClockSource+0x172>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d87f      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d01a      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xa6>
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d87b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d050      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x11a>
 8002fac:	2b60      	cmp	r3, #96	; 0x60
 8002fae:	d877      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d03c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xfa>
 8002fb4:	2b50      	cmp	r3, #80	; 0x50
 8002fb6:	d873      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d058      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x13a>
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d86f      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc0:	2b30      	cmp	r3, #48	; 0x30
 8002fc2:	d064      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15a>
 8002fc4:	2b30      	cmp	r3, #48	; 0x30
 8002fc6:	d86b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d060      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15a>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d867      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15a>
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d05a      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x15a>
 8002fd8:	e062      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f000 f974 	bl	80032d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	609a      	str	r2, [r3, #8]
      break;
 8003006:	e04f      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6899      	ldr	r1, [r3, #8]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f000 f95d 	bl	80032d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e03c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	461a      	mov	r2, r3
 800303c:	f000 f8d4 	bl	80031e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2150      	movs	r1, #80	; 0x50
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f92b 	bl	80032a2 <TIM_ITRx_SetConfig>
      break;
 800304c:	e02c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	461a      	mov	r2, r3
 800305c:	f000 f8f2 	bl	8003244 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2160      	movs	r1, #96	; 0x60
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f91b 	bl	80032a2 <TIM_ITRx_SetConfig>
      break;
 800306c:	e01c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	461a      	mov	r2, r3
 800307c:	f000 f8b4 	bl	80031e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f90b 	bl	80032a2 <TIM_ITRx_SetConfig>
      break;
 800308c:	e00c      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 f902 	bl	80032a2 <TIM_ITRx_SetConfig>
      break;
 800309e:	e003      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e000      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
	...

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <TIM_Base_SetConfig+0xd0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00b      	beq.n	800313c <TIM_Base_SetConfig+0x30>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312a:	d007      	beq.n	800313c <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <TIM_Base_SetConfig+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_Base_SetConfig+0x30>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <TIM_Base_SetConfig+0xd8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d108      	bne.n	800314e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <TIM_Base_SetConfig+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00b      	beq.n	800316e <TIM_Base_SetConfig+0x62>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <TIM_Base_SetConfig+0xd4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <TIM_Base_SetConfig+0xd8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <TIM_Base_SetConfig+0xd0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f023 0201 	bic.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]
  }
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800

080031e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f023 030a 	bic.w	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0210 	bic.w	r2, r3, #16
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800326e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	031b      	lsls	r3, r3, #12
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003280:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	f043 0307 	orr.w	r3, r3, #7
 80032c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b087      	sub	sp, #28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	609a      	str	r2, [r3, #8]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003328:	2302      	movs	r3, #2
 800332a:	e046      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800

080033d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e042      	b.n	800348c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd ff28 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f82b 	bl	8003494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800344c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034ce:	f023 030c 	bic.w	r3, r3, #12
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	430b      	orrs	r3, r1
 80034da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <UART_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d103      	bne.n	8003504 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7ff fb56 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	e002      	b.n	800350a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003504:	f7ff fb3e 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8003508:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <UART_SetConfig+0x118>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	0119      	lsls	r1, r3, #4
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <UART_SetConfig+0x118>)
 8003542:	fba3 0302 	umull	r0, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2064      	movs	r0, #100	; 0x64
 800354a:	fb00 f303 	mul.w	r3, r0, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	3332      	adds	r3, #50	; 0x32
 8003554:	4a15      	ldr	r2, [pc, #84]	; (80035ac <UART_SetConfig+0x118>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	4419      	add	r1, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <UART_SetConfig+0x118>)
 800357a:	fba3 0302 	umull	r0, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2064      	movs	r0, #100	; 0x64
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a07      	ldr	r2, [pc, #28]	; (80035ac <UART_SetConfig+0x118>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	440a      	add	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013800 	.word	0x40013800
 80035ac:	51eb851f 	.word	0x51eb851f

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	2600      	movs	r6, #0
 80035b4:	4d0c      	ldr	r5, [pc, #48]	; (80035e8 <__libc_init_array+0x38>)
 80035b6:	4c0d      	ldr	r4, [pc, #52]	; (80035ec <__libc_init_array+0x3c>)
 80035b8:	1b64      	subs	r4, r4, r5
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	42a6      	cmp	r6, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	f000 f822 	bl	8003608 <_init>
 80035c4:	2600      	movs	r6, #0
 80035c6:	4d0a      	ldr	r5, [pc, #40]	; (80035f0 <__libc_init_array+0x40>)
 80035c8:	4c0a      	ldr	r4, [pc, #40]	; (80035f4 <__libc_init_array+0x44>)
 80035ca:	1b64      	subs	r4, r4, r5
 80035cc:	10a4      	asrs	r4, r4, #2
 80035ce:	42a6      	cmp	r6, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d8:	4798      	blx	r3
 80035da:	3601      	adds	r6, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e2:	4798      	blx	r3
 80035e4:	3601      	adds	r6, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	0800364c 	.word	0x0800364c
 80035ec:	0800364c 	.word	0x0800364c
 80035f0:	0800364c 	.word	0x0800364c
 80035f4:	08003650 	.word	0x08003650

080035f8 <memset>:
 80035f8:	4603      	mov	r3, r0
 80035fa:	4402      	add	r2, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <_init>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr

08003614 <_fini>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

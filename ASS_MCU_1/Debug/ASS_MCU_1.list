
ASS_MCU_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002830  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002830  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106ac  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8f  00000000  00000000  000306e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000332c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a2  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112db  00000000  00000000  0004c222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d008  00000000  00000000  0005d4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d14  00000000  00000000  000ea558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027c0 	.word	0x080027c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027c0 	.word	0x080027c0

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 f829 	bl	80011f0 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000028 	.word	0x20000028

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f000 fff9 	bl	80011f0 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f000 fbb3 	bl	8000988 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 fbad 	bl	8000988 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fba7 	bl	8000988 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 fba1 	bl	8000988 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 fb9b 	bl	8000988 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f000 fb95 	bl	8000988 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d108      	bne.n	80002b4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	4413      	add	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e008      	b.n	80002c6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	3340      	adds	r3, #64	; 0x40
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff3f 	bl	800014c <lcd_send_cmd>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 faf2 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f826 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f90a 	bl	80004fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002e8:	f000 f8de 	bl	80004a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002ec:	f000 f890 	bl	8000410 <MX_TIM2_Init>
  MX_I2C1_Init();
 80002f0:	f000 f860 	bl	80003b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80002f4:	f7ff ff8a 	bl	800020c <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_goto_XY(0, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ffc9 	bl	8000292 <lcd_goto_XY>
	  lcd_send_string("Hello_World");
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <main+0x50>)
 8000302:	f7ff ffb1 	bl	8000268 <lcd_send_string>
	  HAL_Delay(2000);
 8000306:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800030a:	f000 fb3d 	bl	8000988 <HAL_Delay>
	  lcd_goto_XY(1, 0);
 800030e:	2100      	movs	r1, #0
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffbe 	bl	8000292 <lcd_goto_XY>
	  lcd_send_string("Hello_Hy");
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <main+0x54>)
 8000318:	f7ff ffa6 	bl	8000268 <lcd_send_string>
	  HAL_Delay(2000);
 800031c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000320:	f000 fb32 	bl	8000988 <HAL_Delay>
	  lcd_goto_XY(0, 0);
 8000324:	e7e8      	b.n	80002f8 <main+0x20>
 8000326:	bf00      	nop
 8000328:	080027d8 	.word	0x080027d8
 800032c:	080027e4 	.word	0x080027e4

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	; 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fa36 	bl	80027b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000352:	2302      	movs	r3, #2
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000362:	2300      	movs	r3, #0
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000366:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fa95 	bl	80018a0 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800037c:	f000 f964 	bl	8000648 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fd00 	bl	8001da0 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003a6:	f000 f94f 	bl	8000648 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_I2C1_Init+0x50>)
 80003ba:	4a13      	ldr	r2, [pc, #76]	; (8000408 <MX_I2C1_Init+0x54>)
 80003bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_I2C1_Init+0x50>)
 80003c0:	4a12      	ldr	r2, [pc, #72]	; (800040c <MX_I2C1_Init+0x58>)
 80003c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_I2C1_Init+0x50>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_I2C1_Init+0x50>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_I2C1_Init+0x50>)
 80003d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <MX_I2C1_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_I2C1_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_I2C1_Init+0x50>)
 80003f2:	f000 fdb9 	bl	8000f68 <HAL_I2C_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003fc:	f000 f924 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000028 	.word	0x20000028
 8000408:	40005400 	.word	0x40005400
 800040c:	000186a0 	.word	0x000186a0

08000410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <MX_TIM2_Init+0x94>)
 800042e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <MX_TIM2_Init+0x94>)
 8000436:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800043a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MX_TIM2_Init+0x94>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <MX_TIM2_Init+0x94>)
 8000444:	2209      	movs	r2, #9
 8000446:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <MX_TIM2_Init+0x94>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_TIM2_Init+0x94>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000454:	4813      	ldr	r0, [pc, #76]	; (80004a4 <MX_TIM2_Init+0x94>)
 8000456:	f001 fe31 	bl	80020bc <HAL_TIM_Base_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000460:	f000 f8f2 	bl	8000648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4619      	mov	r1, r3
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <MX_TIM2_Init+0x94>)
 8000472:	f001 fe72 	bl	800215a <HAL_TIM_ConfigClockSource>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800047c:	f000 f8e4 	bl	8000648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000488:	463b      	mov	r3, r7
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_TIM2_Init+0x94>)
 800048e:	f002 f82f 	bl	80024f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000498:	f000 f8d6 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800049c:	bf00      	nop
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000007c 	.word	0x2000007c

080004a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <MX_USART2_UART_Init+0x50>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004e0:	f002 f864 	bl	80025ac <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ea:	f000 f8ad 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000c4 	.word	0x200000c4
 80004f8:	40004400 	.word	0x40004400

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b48      	ldr	r3, [pc, #288]	; (8000634 <MX_GPIO_Init+0x138>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a47      	ldr	r2, [pc, #284]	; (8000634 <MX_GPIO_Init+0x138>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b45      	ldr	r3, [pc, #276]	; (8000634 <MX_GPIO_Init+0x138>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b42      	ldr	r3, [pc, #264]	; (8000634 <MX_GPIO_Init+0x138>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a41      	ldr	r2, [pc, #260]	; (8000634 <MX_GPIO_Init+0x138>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <MX_GPIO_Init+0x138>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <MX_GPIO_Init+0x138>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a3b      	ldr	r2, [pc, #236]	; (8000634 <MX_GPIO_Init+0x138>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b39      	ldr	r3, [pc, #228]	; (8000634 <MX_GPIO_Init+0x138>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <MX_GPIO_Init+0x138>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a35      	ldr	r2, [pc, #212]	; (8000634 <MX_GPIO_Init+0x138>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_GPIO_Init+0x138>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000576:	4830      	ldr	r0, [pc, #192]	; (8000638 <MX_GPIO_Init+0x13c>)
 8000578:	f000 fcbc 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000582:	482e      	ldr	r0, [pc, #184]	; (800063c <MX_GPIO_Init+0x140>)
 8000584:	f000 fcb6 	bl	8000ef4 <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	482c      	ldr	r0, [pc, #176]	; (8000640 <MX_GPIO_Init+0x144>)
 800058e:	f000 fcb1 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <MX_GPIO_Init+0x148>)
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4826      	ldr	r0, [pc, #152]	; (8000640 <MX_GPIO_Init+0x144>)
 80005a8:	f000 fb20 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 80005ac:	2303      	movs	r3, #3
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	481e      	ldr	r0, [pc, #120]	; (8000638 <MX_GPIO_Init+0x13c>)
 80005c0:	f000 fb14 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|D7_Pin|D8_Pin;
 80005c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <MX_GPIO_Init+0x13c>)
 80005de:	f000 fb05 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 80005e2:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80005e6:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <MX_GPIO_Init+0x140>)
 80005fc:	f000 faf6 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <MX_GPIO_Init+0x144>)
 8000618:	f000 fae8 	bl	8000bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2028      	movs	r0, #40	; 0x28
 8000622:	f000 faac 	bl	8000b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000626:	2028      	movs	r0, #40	; 0x28
 8000628:	f000 fac5 	bl	8000bb6 <HAL_NVIC_EnableIRQ>

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800
 800063c:	40010c00 	.word	0x40010c00
 8000640:	40011000 	.word	0x40011000
 8000644:	10110000 	.word	0x10110000

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_MspInit+0x5c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_MspInit+0x5c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_MspInit+0x5c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_MspInit+0x5c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_MspInit+0x5c>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_MspInit+0x5c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_MspInit+0x60>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_MspInit+0x60>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010000 	.word	0x40010000

080006b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <HAL_I2C_MspInit+0x90>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d132      	bne.n	800073e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_I2C_MspInit+0x94>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <HAL_I2C_MspInit+0x94>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_I2C_MspInit+0x94>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f6:	2312      	movs	r3, #18
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <HAL_I2C_MspInit+0x98>)
 8000706:	f000 fa71 	bl	8000bec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_I2C_MspInit+0x9c>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <HAL_I2C_MspInit+0x9c>)
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_I2C_MspInit+0x94>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_I2C_MspInit+0x94>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_I2C_MspInit+0x94>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010c00 	.word	0x40010c00
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000768:	d10b      	bne.n	8000782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_TIM_Base_MspInit+0x34>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_TIM_Base_MspInit+0x34>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_TIM_Base_MspInit+0x34>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <HAL_UART_MspInit+0x70>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d123      	bne.n	80007f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_UART_MspInit+0x74>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <HAL_UART_MspInit+0x74>)
 80007b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ba:	61d3      	str	r3, [r2, #28]
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_UART_MspInit+0x74>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_UART_MspInit+0x74>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <HAL_UART_MspInit+0x74>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_UART_MspInit+0x74>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e0:	230c      	movs	r3, #12
 80007e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_UART_MspInit+0x78>)
 80007f4:	f000 f9fa 	bl	8000bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40004400 	.word	0x40004400
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f87d 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800085e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000862:	f000 fb5f 	bl	8000f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
	...

08000878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000878:	f7ff fff7 	bl	800086a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800087e:	490c      	ldr	r1, [pc, #48]	; (80008b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000894:	4c09      	ldr	r4, [pc, #36]	; (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f001 ff61 	bl	8002768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fd17 	bl	80002d8 <main>
  bx lr
 80008aa:	4770      	bx	lr
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b4:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 80008b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008bc:	20000110 	.word	0x20000110

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_Init+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_Init+0x28>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f947 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff feb8 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f95f 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f927 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_IncTick+0x1c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x20>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_IncTick+0x20>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000008 	.word	0x20000008
 8000970:	2000010c 	.word	0x2000010c

08000974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b02      	ldr	r3, [pc, #8]	; (8000984 <HAL_GetTick+0x10>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	2000010c 	.word	0x2000010c

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff fff0 	bl	8000974 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffe0 	bl	8000974 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <__NVIC_EnableIRQ+0x34>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff90 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff2d 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff42 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff90 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5f 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff35 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b08b      	sub	sp, #44	; 0x2c
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e169      	b.n	8000ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c00:	2201      	movs	r2, #1
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	f040 8158 	bne.w	8000ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a9a      	ldr	r2, [pc, #616]	; (8000e8c <HAL_GPIO_Init+0x2a0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d05e      	beq.n	8000ce6 <HAL_GPIO_Init+0xfa>
 8000c28:	4a98      	ldr	r2, [pc, #608]	; (8000e8c <HAL_GPIO_Init+0x2a0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d875      	bhi.n	8000d1a <HAL_GPIO_Init+0x12e>
 8000c2e:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <HAL_GPIO_Init+0x2a4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d058      	beq.n	8000ce6 <HAL_GPIO_Init+0xfa>
 8000c34:	4a96      	ldr	r2, [pc, #600]	; (8000e90 <HAL_GPIO_Init+0x2a4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d86f      	bhi.n	8000d1a <HAL_GPIO_Init+0x12e>
 8000c3a:	4a96      	ldr	r2, [pc, #600]	; (8000e94 <HAL_GPIO_Init+0x2a8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d052      	beq.n	8000ce6 <HAL_GPIO_Init+0xfa>
 8000c40:	4a94      	ldr	r2, [pc, #592]	; (8000e94 <HAL_GPIO_Init+0x2a8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d869      	bhi.n	8000d1a <HAL_GPIO_Init+0x12e>
 8000c46:	4a94      	ldr	r2, [pc, #592]	; (8000e98 <HAL_GPIO_Init+0x2ac>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d04c      	beq.n	8000ce6 <HAL_GPIO_Init+0xfa>
 8000c4c:	4a92      	ldr	r2, [pc, #584]	; (8000e98 <HAL_GPIO_Init+0x2ac>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d863      	bhi.n	8000d1a <HAL_GPIO_Init+0x12e>
 8000c52:	4a92      	ldr	r2, [pc, #584]	; (8000e9c <HAL_GPIO_Init+0x2b0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d046      	beq.n	8000ce6 <HAL_GPIO_Init+0xfa>
 8000c58:	4a90      	ldr	r2, [pc, #576]	; (8000e9c <HAL_GPIO_Init+0x2b0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d85d      	bhi.n	8000d1a <HAL_GPIO_Init+0x12e>
 8000c5e:	2b12      	cmp	r3, #18
 8000c60:	d82a      	bhi.n	8000cb8 <HAL_GPIO_Init+0xcc>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d859      	bhi.n	8000d1a <HAL_GPIO_Init+0x12e>
 8000c66:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <HAL_GPIO_Init+0x80>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000ce7 	.word	0x08000ce7
 8000c70:	08000cc1 	.word	0x08000cc1
 8000c74:	08000cd3 	.word	0x08000cd3
 8000c78:	08000d15 	.word	0x08000d15
 8000c7c:	08000d1b 	.word	0x08000d1b
 8000c80:	08000d1b 	.word	0x08000d1b
 8000c84:	08000d1b 	.word	0x08000d1b
 8000c88:	08000d1b 	.word	0x08000d1b
 8000c8c:	08000d1b 	.word	0x08000d1b
 8000c90:	08000d1b 	.word	0x08000d1b
 8000c94:	08000d1b 	.word	0x08000d1b
 8000c98:	08000d1b 	.word	0x08000d1b
 8000c9c:	08000d1b 	.word	0x08000d1b
 8000ca0:	08000d1b 	.word	0x08000d1b
 8000ca4:	08000d1b 	.word	0x08000d1b
 8000ca8:	08000d1b 	.word	0x08000d1b
 8000cac:	08000d1b 	.word	0x08000d1b
 8000cb0:	08000cc9 	.word	0x08000cc9
 8000cb4:	08000cdd 	.word	0x08000cdd
 8000cb8:	4a79      	ldr	r2, [pc, #484]	; (8000ea0 <HAL_GPIO_Init+0x2b4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d013      	beq.n	8000ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cbe:	e02c      	b.n	8000d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e029      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e024      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e01f      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	330c      	adds	r3, #12
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e01a      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e013      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d105      	bne.n	8000d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	611a      	str	r2, [r3, #16]
          break;
 8000d06:	e009      	b.n	8000d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	615a      	str	r2, [r3, #20]
          break;
 8000d12:	e003      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x130>
          break;
 8000d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2bff      	cmp	r3, #255	; 0xff
 8000d20:	d801      	bhi.n	8000d26 <HAL_GPIO_Init+0x13a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	e001      	b.n	8000d2a <HAL_GPIO_Init+0x13e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	2bff      	cmp	r3, #255	; 0xff
 8000d30:	d802      	bhi.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x152>
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	3b08      	subs	r3, #8
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	210f      	movs	r1, #15
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	6a39      	ldr	r1, [r7, #32]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80b1 	beq.w	8000ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_GPIO_Init+0x2b8>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <HAL_GPIO_Init+0x2b8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d84:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2bc>)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a40      	ldr	r2, [pc, #256]	; (8000eac <HAL_GPIO_Init+0x2c0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d013      	beq.n	8000dd8 <HAL_GPIO_Init+0x1ec>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <HAL_GPIO_Init+0x2c4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d00d      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e8>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <HAL_GPIO_Init+0x2c8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_Init+0x1e4>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3d      	ldr	r2, [pc, #244]	; (8000eb8 <HAL_GPIO_Init+0x2cc>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d101      	bne.n	8000dcc <HAL_GPIO_Init+0x1e0>
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x1ee>
 8000dcc:	2304      	movs	r3, #4
 8000dce:	e004      	b.n	8000dda <HAL_GPIO_Init+0x1ee>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x1ee>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <HAL_GPIO_Init+0x1ee>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ddc:	f002 0203 	and.w	r2, r2, #3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4093      	lsls	r3, r2
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dea:	492f      	ldr	r1, [pc, #188]	; (8000ea8 <HAL_GPIO_Init+0x2bc>)
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	492c      	ldr	r1, [pc, #176]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	608b      	str	r3, [r1, #8]
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4928      	ldr	r1, [pc, #160]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	4922      	ldr	r1, [pc, #136]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60cb      	str	r3, [r1, #12]
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	491e      	ldr	r1, [pc, #120]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4918      	ldr	r1, [pc, #96]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	4914      	ldr	r1, [pc, #80]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d021      	beq.n	8000ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	490e      	ldr	r1, [pc, #56]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
 8000e88:	e021      	b.n	8000ece <HAL_GPIO_Init+0x2e2>
 8000e8a:	bf00      	nop
 8000e8c:	10320000 	.word	0x10320000
 8000e90:	10310000 	.word	0x10310000
 8000e94:	10220000 	.word	0x10220000
 8000e98:	10210000 	.word	0x10210000
 8000e9c:	10120000 	.word	0x10120000
 8000ea0:	10110000 	.word	0x10110000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010000 	.word	0x40010000
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	40011400 	.word	0x40011400
 8000ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_GPIO_Init+0x304>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	4909      	ldr	r1, [pc, #36]	; (8000ef0 <HAL_GPIO_Init+0x304>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	fa22 f303 	lsr.w	r3, r2, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f47f ae8e 	bne.w	8000c00 <HAL_GPIO_Init+0x14>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	372c      	adds	r7, #44	; 0x2c
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f10:	e003      	b.n	8000f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	611a      	str	r2, [r3, #16]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f806 	bl	8000f54 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e12b      	b.n	80011d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fb92 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2224      	movs	r2, #36	; 0x24
 8000f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fcc:	f001 f830 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8000fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4a81      	ldr	r2, [pc, #516]	; (80011dc <HAL_I2C_Init+0x274>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d807      	bhi.n	8000fec <HAL_I2C_Init+0x84>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4a80      	ldr	r2, [pc, #512]	; (80011e0 <HAL_I2C_Init+0x278>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	bf94      	ite	ls
 8000fe4:	2301      	movls	r3, #1
 8000fe6:	2300      	movhi	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	e006      	b.n	8000ffa <HAL_I2C_Init+0x92>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4a7d      	ldr	r2, [pc, #500]	; (80011e4 <HAL_I2C_Init+0x27c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	bf94      	ite	ls
 8000ff4:	2301      	movls	r3, #1
 8000ff6:	2300      	movhi	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0e7      	b.n	80011d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <HAL_I2C_Init+0x280>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	430a      	orrs	r2, r1
 8001020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a6a      	ldr	r2, [pc, #424]	; (80011dc <HAL_I2C_Init+0x274>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d802      	bhi.n	800103c <HAL_I2C_Init+0xd4>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3301      	adds	r3, #1
 800103a:	e009      	b.n	8001050 <HAL_I2C_Init+0xe8>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a69      	ldr	r2, [pc, #420]	; (80011ec <HAL_I2C_Init+0x284>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	099b      	lsrs	r3, r3, #6
 800104e:	3301      	adds	r3, #1
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	430b      	orrs	r3, r1
 8001056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	495c      	ldr	r1, [pc, #368]	; (80011dc <HAL_I2C_Init+0x274>)
 800106c:	428b      	cmp	r3, r1
 800106e:	d819      	bhi.n	80010a4 <HAL_I2C_Init+0x13c>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1e59      	subs	r1, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fbb1 f3f3 	udiv	r3, r1, r3
 800107e:	1c59      	adds	r1, r3, #1
 8001080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001084:	400b      	ands	r3, r1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00a      	beq.n	80010a0 <HAL_I2C_Init+0x138>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1e59      	subs	r1, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fbb1 f3f3 	udiv	r3, r1, r3
 8001098:	3301      	adds	r3, #1
 800109a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109e:	e051      	b.n	8001144 <HAL_I2C_Init+0x1dc>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e04f      	b.n	8001144 <HAL_I2C_Init+0x1dc>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <HAL_I2C_Init+0x168>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1e58      	subs	r0, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80010be:	3301      	adds	r3, #1
 80010c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf0c      	ite	eq
 80010c8:	2301      	moveq	r3, #1
 80010ca:	2300      	movne	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	e012      	b.n	80010f6 <HAL_I2C_Init+0x18e>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1e58      	subs	r0, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6859      	ldr	r1, [r3, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	0099      	lsls	r1, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_Init+0x196>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e022      	b.n	8001144 <HAL_I2C_Init+0x1dc>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10e      	bne.n	8001124 <HAL_I2C_Init+0x1bc>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1e58      	subs	r0, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	440b      	add	r3, r1
 8001114:	fbb0 f3f3 	udiv	r3, r0, r3
 8001118:	3301      	adds	r3, #1
 800111a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001122:	e00f      	b.n	8001144 <HAL_I2C_Init+0x1dc>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	1e58      	subs	r0, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	0099      	lsls	r1, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	fbb0 f3f3 	udiv	r3, r0, r3
 800113a:	3301      	adds	r3, #1
 800113c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	6809      	ldr	r1, [r1, #0]
 8001148:	4313      	orrs	r3, r2
 800114a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6911      	ldr	r1, [r2, #16]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68d2      	ldr	r2, [r2, #12]
 800117e:	4311      	orrs	r1, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	430b      	orrs	r3, r1
 8001186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2220      	movs	r2, #32
 80011be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	000186a0 	.word	0x000186a0
 80011e0:	001e847f 	.word	0x001e847f
 80011e4:	003d08ff 	.word	0x003d08ff
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	10624dd3 	.word	0x10624dd3

080011f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	460b      	mov	r3, r1
 80011fe:	817b      	strh	r3, [r7, #10]
 8001200:	4613      	mov	r3, r2
 8001202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fbb6 	bl	8000974 <HAL_GetTick>
 8001208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b20      	cmp	r3, #32
 8001214:	f040 80e0 	bne.w	80013d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2319      	movs	r3, #25
 800121e:	2201      	movs	r2, #1
 8001220:	4970      	ldr	r1, [pc, #448]	; (80013e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f964 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800122e:	2302      	movs	r3, #2
 8001230:	e0d3      	b.n	80013da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_I2C_Master_Transmit+0x50>
 800123c:	2302      	movs	r3, #2
 800123e:	e0cc      	b.n	80013da <HAL_I2C_Master_Transmit+0x1ea>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d007      	beq.n	8001266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2221      	movs	r2, #33	; 0x21
 800127a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2210      	movs	r2, #16
 8001282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	893a      	ldrh	r2, [r7, #8]
 8001296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129c:	b29a      	uxth	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012a8:	8979      	ldrh	r1, [r7, #10]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	6a3a      	ldr	r2, [r7, #32]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 f89c 	bl	80013ec <I2C_MasterRequestWrite>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e08d      	b.n	80013da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012d4:	e066      	b.n	80013a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	6a39      	ldr	r1, [r7, #32]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fa22 	bl	8001724 <I2C_WaitOnTXEFlagUntilTimeout>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00d      	beq.n	8001302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d107      	bne.n	80012fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e06b      	b.n	80013da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29b      	uxth	r3, r3
 800131e:	3b01      	subs	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132a:	3b01      	subs	r3, #1
 800132c:	b29a      	uxth	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b04      	cmp	r3, #4
 800133e:	d11b      	bne.n	8001378 <HAL_I2C_Master_Transmit+0x188>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001344:	2b00      	cmp	r3, #0
 8001346:	d017      	beq.n	8001378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001362:	b29b      	uxth	r3, r3
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	3b01      	subs	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	6a39      	ldr	r1, [r7, #32]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 fa19 	bl	80017b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00d      	beq.n	80013a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2b04      	cmp	r3, #4
 800138e:	d107      	bne.n	80013a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e01a      	b.n	80013da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d194      	bne.n	80012d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2220      	movs	r2, #32
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013d8:	2302      	movs	r3, #2
  }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	00100002 	.word	0x00100002
 80013e8:	ffff0000 	.word	0xffff0000

080013ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	460b      	mov	r3, r1
 80013fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d006      	beq.n	8001416 <I2C_MasterRequestWrite+0x2a>
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <I2C_MasterRequestWrite+0x2a>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001414:	d108      	bne.n	8001428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e00b      	b.n	8001440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	2b12      	cmp	r3, #18
 800142e:	d107      	bne.n	8001440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800143e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 f84f 	bl	80014f0 <I2C_WaitOnFlagUntilTimeout>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00d      	beq.n	8001474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001466:	d103      	bne.n	8001470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e035      	b.n	80014e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800147c:	d108      	bne.n	8001490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800147e:	897b      	ldrh	r3, [r7, #10]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	e01b      	b.n	80014c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001490:	897b      	ldrh	r3, [r7, #10]
 8001492:	11db      	asrs	r3, r3, #7
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0306 	and.w	r3, r3, #6
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f063 030f 	orn	r3, r3, #15
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	490e      	ldr	r1, [pc, #56]	; (80014e8 <I2C_MasterRequestWrite+0xfc>)
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f898 	bl	80015e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e010      	b.n	80014e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <I2C_MasterRequestWrite+0x100>)
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f888 	bl	80015e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	00010008 	.word	0x00010008
 80014ec:	00010002 	.word	0x00010002

080014f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001500:	e048      	b.n	8001594 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d044      	beq.n	8001594 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150a:	f7ff fa33 	bl	8000974 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d302      	bcc.n	8001520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d139      	bne.n	8001594 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	0c1b      	lsrs	r3, r3, #16
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10d      	bne.n	8001546 <I2C_WaitOnFlagUntilTimeout+0x56>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	43da      	mvns	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4013      	ands	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	e00c      	b.n	8001560 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	43da      	mvns	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4013      	ands	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	429a      	cmp	r2, r3
 8001564:	d116      	bne.n	8001594 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e023      	b.n	80015dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10d      	bne.n	80015ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	43da      	mvns	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4013      	ands	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	e00c      	b.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	43da      	mvns	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4013      	ands	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d093      	beq.n	8001502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015f2:	e071      	b.n	80016d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d123      	bne.n	800164c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001612:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800161c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2220      	movs	r2, #32
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f043 0204 	orr.w	r2, r3, #4
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e067      	b.n	800171c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001652:	d041      	beq.n	80016d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001654:	f7ff f98e 	bl	8000974 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d302      	bcc.n	800166a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d136      	bne.n	80016d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10c      	bne.n	800168e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4013      	ands	r3, r2
 8001680:	b29b      	uxth	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	e00b      	b.n	80016a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	43da      	mvns	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4013      	ands	r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d016      	beq.n	80016d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f043 0220 	orr.w	r2, r3, #32
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e021      	b.n	800171c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	0c1b      	lsrs	r3, r3, #16
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10c      	bne.n	80016fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	43da      	mvns	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	4013      	ands	r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf14      	ite	ne
 80016f4:	2301      	movne	r3, #1
 80016f6:	2300      	moveq	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e00b      	b.n	8001714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4013      	ands	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf14      	ite	ne
 800170e:	2301      	movne	r3, #1
 8001710:	2300      	moveq	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f af6d 	bne.w	80015f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001730:	e034      	b.n	800179c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f886 	bl	8001844 <I2C_IsAcknowledgeFailed>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e034      	b.n	80017ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d028      	beq.n	800179c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff f913 	bl	8000974 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11d      	bne.n	800179c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176a:	2b80      	cmp	r3, #128	; 0x80
 800176c:	d016      	beq.n	800179c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e007      	b.n	80017ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	2b80      	cmp	r3, #128	; 0x80
 80017a8:	d1c3      	bne.n	8001732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017c0:	e034      	b.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f83e 	bl	8001844 <I2C_IsAcknowledgeFailed>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e034      	b.n	800183c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d028      	beq.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017da:	f7ff f8cb 	bl	8000974 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d302      	bcc.n	80017f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11d      	bne.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d016      	beq.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b04      	cmp	r3, #4
 8001838:	d1c3      	bne.n	80017c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185a:	d11b      	bne.n	8001894 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001864:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f043 0204 	orr.w	r2, r3, #4
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e26c      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8087 	beq.w	80019ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d00c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018cc:	4b8f      	ldr	r3, [pc, #572]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d112      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
 80018d8:	4b8c      	ldr	r3, [pc, #560]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d10b      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	4b89      	ldr	r3, [pc, #548]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d06c      	beq.n	80019cc <HAL_RCC_OscConfig+0x12c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d168      	bne.n	80019cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e246      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x76>
 8001908:	4b80      	ldr	r3, [pc, #512]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a7f      	ldr	r2, [pc, #508]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e02e      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b7b      	ldr	r3, [pc, #492]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7a      	ldr	r2, [pc, #488]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a77      	ldr	r2, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0xbc>
 8001942:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a71      	ldr	r2, [pc, #452]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 800195c:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7fe fffa 	bl	8000974 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7fe fff6 	bl	8000974 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1fa      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xe4>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7fe ffe6 	bl	8000974 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7fe ffe2 	bl	8000974 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1e6      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x10c>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019da:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x18c>
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1ba      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4939      	ldr	r1, [pc, #228]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ff9b 	bl	8000974 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a42:	f7fe ff97 	bl	8000974 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e19b      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4927      	ldr	r1, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe ff7a 	bl	8000974 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7fe ff76 	bl	8000974 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e17a      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03a      	beq.n	8001b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe ff5a 	bl	8000974 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7fe ff56 	bl	8000974 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e15a      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 facc 	bl	8002080 <RCC_Delay>
 8001ae8:	e01c      	b.n	8001b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7fe ff40 	bl	8000974 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af6:	e00f      	b.n	8001b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7fe ff3c 	bl	8000974 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d908      	bls.n	8001b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e140      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	42420000 	.word	0x42420000
 8001b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e9      	bne.n	8001af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a6 	beq.w	8001c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b97      	ldr	r3, [pc, #604]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b94      	ldr	r3, [pc, #592]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a93      	ldr	r2, [pc, #588]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b91      	ldr	r3, [pc, #580]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b8e      	ldr	r3, [pc, #568]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d118      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a8a      	ldr	r2, [pc, #552]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7fe fefd 	bl	8000974 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7e:	f7fe fef9 	bl	8000974 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	; 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0fd      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x312>
 8001ba4:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e02d      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bba:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a75      	ldr	r2, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b73      	ldr	r3, [pc, #460]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a72      	ldr	r2, [pc, #456]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	e01c      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x356>
 8001bdc:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a6c      	ldr	r2, [pc, #432]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a69      	ldr	r2, [pc, #420]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a66      	ldr	r2, [pc, #408]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a63      	ldr	r2, [pc, #396]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d015      	beq.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7fe fead 	bl	8000974 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7fe fea9 	bl	8000974 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0ab      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ee      	beq.n	8001c1e <HAL_RCC_OscConfig+0x37e>
 8001c40:	e014      	b.n	8001c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7fe fe97 	bl	8000974 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fe93 	bl	8000974 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e095      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8081 	beq.w	8001d8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d061      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d146      	bne.n	8001d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0x4fc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fe67 	bl	8000974 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fe63 	bl	8000974 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e067      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	492d      	ldr	r1, [pc, #180]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a19      	ldr	r1, [r3, #32]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	4927      	ldr	r1, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x4fc>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7fe fe37 	bl	8000974 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe fe33 	bl	8000974 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e037      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46a>
 8001d28:	e02f      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_RCC_OscConfig+0x4fc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe20 	bl	8000974 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe fe1c 	bl	8000974 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e020      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x498>
 8001d56:	e018      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42420060 	.word	0x42420060

08001da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d0      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4965      	ldr	r1, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d040      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d115      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e073      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06b      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4936      	ldr	r1, [pc, #216]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7fe fd70 	bl	8000974 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7fe fd6c 	bl	8000974 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e053      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d210      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1cc>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1d0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fcce 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080027f0 	.word	0x080027f0
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x36>
 8001fa2:	e027      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa6:	613b      	str	r3, [r7, #16]
      break;
 8001fa8:	e027      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0c9b      	lsrs	r3, r3, #18
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	0c5b      	lsrs	r3, r3, #17
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	fb02 f203 	mul.w	r2, r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e004      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	613b      	str	r3, [r7, #16]
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff6:	613b      	str	r3, [r7, #16]
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	693b      	ldr	r3, [r7, #16]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	007a1200 	.word	0x007a1200
 8002010:	08002808 	.word	0x08002808
 8002014:	08002818 	.word	0x08002818
 8002018:	003d0900 	.word	0x003d0900

0800201c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b02      	ldr	r3, [pc, #8]	; (800202c <HAL_RCC_GetHCLKFreq+0x10>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002034:	f7ff fff2 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08002800 	.word	0x08002800

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffde 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	08002800 	.word	0x08002800

08002080 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <RCC_Delay+0x34>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <RCC_Delay+0x38>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0a5b      	lsrs	r3, r3, #9
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800209c:	bf00      	nop
  }
  while (Delay --);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	60fa      	str	r2, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f9      	bne.n	800209c <RCC_Delay+0x1c>
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000000 	.word	0x20000000
 80020b8:	10624dd3 	.word	0x10624dd3

080020bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e041      	b.n	8002152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fb38 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 f8f4 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_TIM_ConfigClockSource+0x1c>
 8002172:	2302      	movs	r3, #2
 8002174:	e0b4      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x186>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002194:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800219c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ae:	d03e      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xd4>
 80021b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b4:	f200 8087 	bhi.w	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021bc:	f000 8086 	beq.w	80022cc <HAL_TIM_ConfigClockSource+0x172>
 80021c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c4:	d87f      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021c6:	2b70      	cmp	r3, #112	; 0x70
 80021c8:	d01a      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0xa6>
 80021ca:	2b70      	cmp	r3, #112	; 0x70
 80021cc:	d87b      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021ce:	2b60      	cmp	r3, #96	; 0x60
 80021d0:	d050      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0x11a>
 80021d2:	2b60      	cmp	r3, #96	; 0x60
 80021d4:	d877      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021d6:	2b50      	cmp	r3, #80	; 0x50
 80021d8:	d03c      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0xfa>
 80021da:	2b50      	cmp	r3, #80	; 0x50
 80021dc:	d873      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d058      	beq.n	8002294 <HAL_TIM_ConfigClockSource+0x13a>
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d86f      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021e6:	2b30      	cmp	r3, #48	; 0x30
 80021e8:	d064      	beq.n	80022b4 <HAL_TIM_ConfigClockSource+0x15a>
 80021ea:	2b30      	cmp	r3, #48	; 0x30
 80021ec:	d86b      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d060      	beq.n	80022b4 <HAL_TIM_ConfigClockSource+0x15a>
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d867      	bhi.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d05c      	beq.n	80022b4 <HAL_TIM_ConfigClockSource+0x15a>
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d05a      	beq.n	80022b4 <HAL_TIM_ConfigClockSource+0x15a>
 80021fe:	e062      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f000 f94f 	bl	80024b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002222:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	609a      	str	r2, [r3, #8]
      break;
 800222c:	e04f      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f000 f938 	bl	80024b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002250:	609a      	str	r2, [r3, #8]
      break;
 8002252:	e03c      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	f000 f8af 	bl	80023c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2150      	movs	r1, #80	; 0x50
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f906 	bl	800247e <TIM_ITRx_SetConfig>
      break;
 8002272:	e02c      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	461a      	mov	r2, r3
 8002282:	f000 f8cd 	bl	8002420 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2160      	movs	r1, #96	; 0x60
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f8f6 	bl	800247e <TIM_ITRx_SetConfig>
      break;
 8002292:	e01c      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f000 f88f 	bl	80023c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f8e6 	bl	800247e <TIM_ITRx_SetConfig>
      break;
 80022b2:	e00c      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 f8dd 	bl	800247e <TIM_ITRx_SetConfig>
      break;
 80022c4:	e003      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ca:	e000      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <TIM_Base_SetConfig+0xd0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <TIM_Base_SetConfig+0xd4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <TIM_Base_SetConfig+0xd8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <TIM_Base_SetConfig+0xd0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <TIM_Base_SetConfig+0xd4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <TIM_Base_SetConfig+0xd8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <TIM_Base_SetConfig+0xd0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f023 0201 	bic.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]
  }
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800

080023c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f023 0201 	bic.w	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f023 030a 	bic.w	r3, r3, #10
 8002400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	621a      	str	r2, [r3, #32]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	031b      	lsls	r3, r3, #12
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	621a      	str	r2, [r3, #32]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	f043 0307 	orr.w	r3, r3, #7
 80024a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b087      	sub	sp, #28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	021a      	lsls	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4313      	orrs	r3, r2
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002504:	2302      	movs	r3, #2
 8002506:	e046      	b.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d009      	beq.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10c      	bne.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4313      	orrs	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e042      	b.n	8002644 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f8dc 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f82b 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002686:	f023 030c 	bic.w	r3, r3, #12
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	430b      	orrs	r3, r1
 8002692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <UART_SetConfig+0x114>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d103      	bne.n	80026bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b4:	f7ff fcd0 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	e002      	b.n	80026c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026bc:	f7ff fcb8 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80026c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009a      	lsls	r2, r3, #2
 80026cc:	441a      	add	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <UART_SetConfig+0x118>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	0119      	lsls	r1, r3, #4
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <UART_SetConfig+0x118>)
 80026fa:	fba3 0302 	umull	r0, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	fb00 f303 	mul.w	r3, r0, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <UART_SetConfig+0x118>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	4419      	add	r1, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009a      	lsls	r2, r3, #2
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <UART_SetConfig+0x118>)
 8002732:	fba3 0302 	umull	r0, r3, r3, r2
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2064      	movs	r0, #100	; 0x64
 800273a:	fb00 f303 	mul.w	r3, r0, r3
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	3332      	adds	r3, #50	; 0x32
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <UART_SetConfig+0x118>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	440a      	add	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40013800 	.word	0x40013800
 8002764:	51eb851f 	.word	0x51eb851f

08002768 <__libc_init_array>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2600      	movs	r6, #0
 800276c:	4d0c      	ldr	r5, [pc, #48]	; (80027a0 <__libc_init_array+0x38>)
 800276e:	4c0d      	ldr	r4, [pc, #52]	; (80027a4 <__libc_init_array+0x3c>)
 8002770:	1b64      	subs	r4, r4, r5
 8002772:	10a4      	asrs	r4, r4, #2
 8002774:	42a6      	cmp	r6, r4
 8002776:	d109      	bne.n	800278c <__libc_init_array+0x24>
 8002778:	f000 f822 	bl	80027c0 <_init>
 800277c:	2600      	movs	r6, #0
 800277e:	4d0a      	ldr	r5, [pc, #40]	; (80027a8 <__libc_init_array+0x40>)
 8002780:	4c0a      	ldr	r4, [pc, #40]	; (80027ac <__libc_init_array+0x44>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	42a6      	cmp	r6, r4
 8002788:	d105      	bne.n	8002796 <__libc_init_array+0x2e>
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002790:	4798      	blx	r3
 8002792:	3601      	adds	r6, #1
 8002794:	e7ee      	b.n	8002774 <__libc_init_array+0xc>
 8002796:	f855 3b04 	ldr.w	r3, [r5], #4
 800279a:	4798      	blx	r3
 800279c:	3601      	adds	r6, #1
 800279e:	e7f2      	b.n	8002786 <__libc_init_array+0x1e>
 80027a0:	0800281c 	.word	0x0800281c
 80027a4:	0800281c 	.word	0x0800281c
 80027a8:	0800281c 	.word	0x0800281c
 80027ac:	08002820 	.word	0x08002820

080027b0 <memset>:
 80027b0:	4603      	mov	r3, r0
 80027b2:	4402      	add	r2, r0
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d100      	bne.n	80027ba <memset+0xa>
 80027b8:	4770      	bx	lr
 80027ba:	f803 1b01 	strb.w	r1, [r3], #1
 80027be:	e7f9      	b.n	80027b4 <memset+0x4>

080027c0 <_init>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr

080027cc <_fini>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr

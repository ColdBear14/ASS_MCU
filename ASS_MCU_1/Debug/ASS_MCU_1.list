
ASS_MCU_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003568  08003568  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003568  08003568  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003568  08003568  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  2000005c  080035cc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080035cc  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164c6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd6  00000000  00000000  0003654b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00039128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d4c  00000000  00000000  0003af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169df  00000000  00000000  00054c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d462  00000000  00000000  0006b65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  000f8b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003524 	.word	0x08003524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003524 	.word	0x08003524

0800014c <IsButtonPress>:
int TimerForKeyPress[3] = {300,300,300};

int button_flag[3];
int button_long_flag[3];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000009c 	.word	0x2000009c

08000180 <IsButtonLongPress>:

int IsButtonLongPress(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (button_long_flag[index] == 1) {
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <IsButtonLongPress+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <IsButtonLongPress+0x22>
		button_long_flag[index] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <IsButtonLongPress+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <IsButtonLongPress+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200000ac 	.word	0x200000ac

080001b4 <subKeyProcess>:


void subKeyProcess(int index) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	2000009c 	.word	0x2000009c

080001d4 <getIndex>:

int getIndex(int index) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	switch(index){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d015      	beq.n	800020e <getIndex+0x3a>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	dc19      	bgt.n	800021c <getIndex+0x48>
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d003      	beq.n	80001f6 <getIndex+0x22>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d006      	beq.n	8000202 <getIndex+0x2e>
			break;
		case 2:
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
			break;
		default:
			break;
 80001f4:	e012      	b.n	800021c <getIndex+0x48>
			return HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001f6:	2101      	movs	r1, #1
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <getIndex+0x54>)
 80001fa:	f001 fb83 	bl	8001904 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	e00e      	b.n	8000220 <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000202:	2102      	movs	r1, #2
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <getIndex+0x54>)
 8000206:	f001 fb7d 	bl	8001904 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	e008      	b.n	8000220 <getIndex+0x4c>
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <getIndex+0x58>)
 8000214:	f001 fb76 	bl	8001904 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	e001      	b.n	8000220 <getIndex+0x4c>
			break;
 800021c:	bf00      	nop
	}
	return 0;
 800021e:	2300      	movs	r3, #0
}
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010800 	.word	0x40010800
 800022c:	40011000 	.word	0x40011000

08000230 <getKeyInput>:

void getKeyInput() {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e073      	b.n	8000324 <getKeyInput+0xf4>
		KeyReg0[i] = KeyReg1[i];
 800023c:	4a3d      	ldr	r2, [pc, #244]	; (8000334 <getKeyInput+0x104>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	493c      	ldr	r1, [pc, #240]	; (8000338 <getKeyInput+0x108>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800024c:	4a3b      	ldr	r2, [pc, #236]	; (800033c <getKeyInput+0x10c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4937      	ldr	r1, [pc, #220]	; (8000334 <getKeyInput+0x104>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f7ff ffb9 	bl	80001d4 <getIndex>
 8000262:	4602      	mov	r2, r0
 8000264:	4935      	ldr	r1, [pc, #212]	; (800033c <getKeyInput+0x10c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800026c:	4a32      	ldr	r2, [pc, #200]	; (8000338 <getKeyInput+0x108>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	492f      	ldr	r1, [pc, #188]	; (8000334 <getKeyInput+0x104>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027c:	429a      	cmp	r2, r3
 800027e:	d14e      	bne.n	800031e <getKeyInput+0xee>
 8000280:	4a2c      	ldr	r2, [pc, #176]	; (8000334 <getKeyInput+0x104>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	492c      	ldr	r1, [pc, #176]	; (800033c <getKeyInput+0x10c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000290:	429a      	cmp	r2, r3
 8000292:	d144      	bne.n	800031e <getKeyInput+0xee>
			//case short pressed
			if (KeyReg3[i] != KeyReg2[i]) {
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <getKeyInput+0x110>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029c:	4927      	ldr	r1, [pc, #156]	; (800033c <getKeyInput+0x10c>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d01b      	beq.n	80002e0 <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 80002a8:	4a24      	ldr	r2, [pc, #144]	; (800033c <getKeyInput+0x10c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b0:	4923      	ldr	r1, [pc, #140]	; (8000340 <getKeyInput+0x110>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 80002b8:	4a20      	ldr	r2, [pc, #128]	; (800033c <getKeyInput+0x10c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d12c      	bne.n	800031e <getKeyInput+0xee>
					//todo
					subKeyProcess(i);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff75 	bl	80001b4 <subKeyProcess>
					HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80002ca:	2120      	movs	r1, #32
 80002cc:	481d      	ldr	r0, [pc, #116]	; (8000344 <getKeyInput+0x114>)
 80002ce:	f001 fb48 	bl	8001962 <HAL_GPIO_TogglePin>
					TimerForKeyPress[i] = 300;
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <getKeyInput+0x118>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002de:	e01e      	b.n	800031e <getKeyInput+0xee>

				}
			} else { // case long pressed
				TimerForKeyPress[i]--;
 80002e0:	4a19      	ldr	r2, [pc, #100]	; (8000348 <getKeyInput+0x118>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	1e5a      	subs	r2, r3, #1
 80002ea:	4917      	ldr	r1, [pc, #92]	; (8000348 <getKeyInput+0x118>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <getKeyInput+0x118>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d10f      	bne.n	800031e <getKeyInput+0xee>
					//todo
					button_long_flag[i] = 1;
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <getKeyInput+0x11c>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2101      	movs	r1, #1
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <getKeyInput+0x118>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					KeyReg3[i] = NORMAL_STATE;
 8000314:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <getKeyInput+0x110>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2101      	movs	r1, #1
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	dd88      	ble.n	800023c <getKeyInput+0xc>
				}
			}
		}
	}
}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000000 	.word	0x20000000
 800033c:	20000018 	.word	0x20000018
 8000340:	20000024 	.word	0x20000024
 8000344:	40010800 	.word	0x40010800
 8000348:	20000030 	.word	0x20000030
 800034c:	200000ac 	.word	0x200000ac

08000350 <displayTraffic>:

int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;

void displayTraffic() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 8000354:	4b2d      	ldr	r3, [pc, #180]	; (800040c <displayTraffic+0xbc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d109      	bne.n	8000370 <displayTraffic+0x20>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	482b      	ldr	r0, [pc, #172]	; (8000410 <displayTraffic+0xc0>)
 8000362:	f001 fae6 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2120      	movs	r1, #32
 800036a:	4829      	ldr	r0, [pc, #164]	; (8000410 <displayTraffic+0xc0>)
 800036c:	f001 fae1 	bl	8001932 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <displayTraffic+0xc4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d109      	bne.n	800038c <displayTraffic+0x3c>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2108      	movs	r1, #8
 800037c:	4824      	ldr	r0, [pc, #144]	; (8000410 <displayTraffic+0xc0>)
 800037e:	f001 fad8 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2120      	movs	r1, #32
 8000386:	4822      	ldr	r0, [pc, #136]	; (8000410 <displayTraffic+0xc0>)
 8000388:	f001 fad3 	bl	8001932 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <displayTraffic+0xc8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d109      	bne.n	80003a8 <displayTraffic+0x58>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2108      	movs	r1, #8
 8000398:	481d      	ldr	r0, [pc, #116]	; (8000410 <displayTraffic+0xc0>)
 800039a:	f001 faca 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	481b      	ldr	r0, [pc, #108]	; (8000410 <displayTraffic+0xc0>)
 80003a4:	f001 fac5 	bl	8001932 <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <displayTraffic+0xcc>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10b      	bne.n	80003c8 <displayTraffic+0x78>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b6:	481a      	ldr	r0, [pc, #104]	; (8000420 <displayTraffic+0xd0>)
 80003b8:	f001 fabb 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c2:	4817      	ldr	r0, [pc, #92]	; (8000420 <displayTraffic+0xd0>)
 80003c4:	f001 fab5 	bl	8001932 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <displayTraffic+0xd4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10b      	bne.n	80003e8 <displayTraffic+0x98>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4812      	ldr	r0, [pc, #72]	; (8000420 <displayTraffic+0xd0>)
 80003d8:	f001 faab 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <displayTraffic+0xd0>)
 80003e4:	f001 faa5 	bl	8001932 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <displayTraffic+0xd8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d10b      	bne.n	8000408 <displayTraffic+0xb8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	480a      	ldr	r0, [pc, #40]	; (8000420 <displayTraffic+0xd0>)
 80003f8:	f001 fa9b 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000402:	4807      	ldr	r0, [pc, #28]	; (8000420 <displayTraffic+0xd0>)
 8000404:	f001 fa95 	bl	8001932 <HAL_GPIO_WritePin>
	}
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000003c 	.word	0x2000003c
 8000410:	40010c00 	.word	0x40010c00
 8000414:	2000007c 	.word	0x2000007c
 8000418:	20000078 	.word	0x20000078
 800041c:	20000080 	.word	0x20000080
 8000420:	40010800 	.word	0x40010800
 8000424:	20000084 	.word	0x20000084
 8000428:	20000040 	.word	0x20000040

0800042c <fsm_automatic>:
#include "fsm_automatic.h"

int countDownLEDA;
int countDownLEDB;

void fsm_automatic(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch (statusLED) {
 8000430:	4b54      	ldr	r3, [pc, #336]	; (8000584 <fsm_automatic+0x158>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b0b      	subs	r3, #11
 8000436:	2b03      	cmp	r3, #3
 8000438:	f200 80a0 	bhi.w	800057c <fsm_automatic+0x150>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_automatic+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000455 	.word	0x08000455
 8000448:	08000497 	.word	0x08000497
 800044c:	080004e9 	.word	0x080004e9
 8000450:	0800052b 	.word	0x0800052b
			case RED_GREEN:
				if(IsButtonPress(2) == 1){
 8000454:	2002      	movs	r0, #2
 8000456:	f7ff fe79 	bl	800014c <IsButtonPress>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d102      	bne.n	8000466 <fsm_automatic+0x3a>
					statusLED = MAN_RED_GREEN;
 8000460:	4b48      	ldr	r3, [pc, #288]	; (8000584 <fsm_automatic+0x158>)
 8000462:	2215      	movs	r2, #21
 8000464:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDB <= 0){
 8000466:	4b48      	ldr	r3, [pc, #288]	; (8000588 <fsm_automatic+0x15c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dc06      	bgt.n	800047c <fsm_automatic+0x50>
					statusLED = RED_YELLOW;
 800046e:	4b45      	ldr	r3, [pc, #276]	; (8000584 <fsm_automatic+0x158>)
 8000470:	220c      	movs	r2, #12
 8000472:	601a      	str	r2, [r3, #0]
					countDownLEDB = count_YELLOW;
 8000474:	4b45      	ldr	r3, [pc, #276]	; (800058c <fsm_automatic+0x160>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a43      	ldr	r2, [pc, #268]	; (8000588 <fsm_automatic+0x15c>)
 800047a:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 800047c:	f7ff ff68 	bl	8000350 <displayTraffic>
				countDownLEDA--;
 8000480:	4b43      	ldr	r3, [pc, #268]	; (8000590 <fsm_automatic+0x164>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a42      	ldr	r2, [pc, #264]	; (8000590 <fsm_automatic+0x164>)
 8000488:	6013      	str	r3, [r2, #0]
				countDownLEDB--;
 800048a:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <fsm_automatic+0x15c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3b01      	subs	r3, #1
 8000490:	4a3d      	ldr	r2, [pc, #244]	; (8000588 <fsm_automatic+0x15c>)
 8000492:	6013      	str	r3, [r2, #0]
				break;
 8000494:	e073      	b.n	800057e <fsm_automatic+0x152>
			case RED_YELLOW:
				if(IsButtonPress(2) == 1){
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff fe58 	bl	800014c <IsButtonPress>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d102      	bne.n	80004a8 <fsm_automatic+0x7c>
					statusLED = MAN_RED_YELLOW;
 80004a2:	4b38      	ldr	r3, [pc, #224]	; (8000584 <fsm_automatic+0x158>)
 80004a4:	2216      	movs	r2, #22
 80004a6:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDA <= 0 && countDownLEDB <= 0){
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <fsm_automatic+0x164>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dc0e      	bgt.n	80004ce <fsm_automatic+0xa2>
 80004b0:	4b35      	ldr	r3, [pc, #212]	; (8000588 <fsm_automatic+0x15c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc0a      	bgt.n	80004ce <fsm_automatic+0xa2>
					statusLED = GREEN_RED;
 80004b8:	4b32      	ldr	r3, [pc, #200]	; (8000584 <fsm_automatic+0x158>)
 80004ba:	220d      	movs	r2, #13
 80004bc:	601a      	str	r2, [r3, #0]
					countDownLEDA = count_GREEN;
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <fsm_automatic+0x168>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a33      	ldr	r2, [pc, #204]	; (8000590 <fsm_automatic+0x164>)
 80004c4:	6013      	str	r3, [r2, #0]
					countDownLEDB = count_RED;
 80004c6:	4b34      	ldr	r3, [pc, #208]	; (8000598 <fsm_automatic+0x16c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <fsm_automatic+0x15c>)
 80004cc:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 80004ce:	f7ff ff3f 	bl	8000350 <displayTraffic>
				countDownLEDA--;
 80004d2:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <fsm_automatic+0x164>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a2d      	ldr	r2, [pc, #180]	; (8000590 <fsm_automatic+0x164>)
 80004da:	6013      	str	r3, [r2, #0]
				countDownLEDB--;
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <fsm_automatic+0x15c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	4a29      	ldr	r2, [pc, #164]	; (8000588 <fsm_automatic+0x15c>)
 80004e4:	6013      	str	r3, [r2, #0]
				break;
 80004e6:	e04a      	b.n	800057e <fsm_automatic+0x152>
			case GREEN_RED:
				if(IsButtonPress(2) == 1){
 80004e8:	2002      	movs	r0, #2
 80004ea:	f7ff fe2f 	bl	800014c <IsButtonPress>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d102      	bne.n	80004fa <fsm_automatic+0xce>
					statusLED = YELLOW_RED;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <fsm_automatic+0x158>)
 80004f6:	220e      	movs	r2, #14
 80004f8:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDA <= 0){
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <fsm_automatic+0x164>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	dc06      	bgt.n	8000510 <fsm_automatic+0xe4>
					statusLED = YELLOW_RED;
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <fsm_automatic+0x158>)
 8000504:	220e      	movs	r2, #14
 8000506:	601a      	str	r2, [r3, #0]
					countDownLEDA = count_YELLOW;
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <fsm_automatic+0x160>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a20      	ldr	r2, [pc, #128]	; (8000590 <fsm_automatic+0x164>)
 800050e:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 8000510:	f7ff ff1e 	bl	8000350 <displayTraffic>
				countDownLEDA--;
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <fsm_automatic+0x164>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <fsm_automatic+0x164>)
 800051c:	6013      	str	r3, [r2, #0]
				countDownLEDB--;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <fsm_automatic+0x15c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	4a18      	ldr	r2, [pc, #96]	; (8000588 <fsm_automatic+0x15c>)
 8000526:	6013      	str	r3, [r2, #0]
				break;
 8000528:	e029      	b.n	800057e <fsm_automatic+0x152>
			case YELLOW_RED:
				if(IsButtonPress(2) == 1){
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff fe0e 	bl	800014c <IsButtonPress>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d102      	bne.n	800053c <fsm_automatic+0x110>
					statusLED = MAN_YELLOW_RED;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <fsm_automatic+0x158>)
 8000538:	2218      	movs	r2, #24
 800053a:	601a      	str	r2, [r3, #0]
				}
				if(countDownLEDA <= 0 && countDownLEDB <= 0){
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <fsm_automatic+0x164>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	dc0e      	bgt.n	8000562 <fsm_automatic+0x136>
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <fsm_automatic+0x15c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dc0a      	bgt.n	8000562 <fsm_automatic+0x136>
					statusLED = RED_GREEN;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <fsm_automatic+0x158>)
 800054e:	220b      	movs	r2, #11
 8000550:	601a      	str	r2, [r3, #0]
					countDownLEDA = count_RED;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <fsm_automatic+0x16c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <fsm_automatic+0x164>)
 8000558:	6013      	str	r3, [r2, #0]
					countDownLEDB = count_GREEN;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <fsm_automatic+0x168>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <fsm_automatic+0x15c>)
 8000560:	6013      	str	r3, [r2, #0]
				}
				displayTraffic();
 8000562:	f7ff fef5 	bl	8000350 <displayTraffic>
				countDownLEDA--;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <fsm_automatic+0x164>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <fsm_automatic+0x164>)
 800056e:	6013      	str	r3, [r2, #0]
				countDownLEDB--;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <fsm_automatic+0x15c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	4a04      	ldr	r2, [pc, #16]	; (8000588 <fsm_automatic+0x15c>)
 8000578:	6013      	str	r3, [r2, #0]
				break;
 800057a:	e000      	b.n	800057e <fsm_automatic+0x152>
	default:
		break;
 800057c:	bf00      	nop
		}
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000008c 	.word	0x2000008c
 8000588:	20000098 	.word	0x20000098
 800058c:	2000004c 	.word	0x2000004c
 8000590:	200000a8 	.word	0x200000a8
 8000594:	20000048 	.word	0x20000048
 8000598:	20000044 	.word	0x20000044

0800059c <fsm_manual>:
 *      Author: Hy
 */

#include "fsm_manual.h"

void fsm_manual(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	switch(statusLED){
 80005a0:	4b42      	ldr	r3, [pc, #264]	; (80006ac <fsm_manual+0x110>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b15      	subs	r3, #21
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d87e      	bhi.n	80006a8 <fsm_manual+0x10c>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <fsm_manual+0x14>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005fb 	.word	0x080005fb
 80005b8:	08000635 	.word	0x08000635
 80005bc:	0800066f 	.word	0x0800066f
	case MAN_RED_GREEN:
		if(IsButtonPress(1) == 1){
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fdc3 	bl	800014c <IsButtonPress>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d102      	bne.n	80005d2 <fsm_manual+0x36>
			statusLED = MAN_RED_YELLOW;
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <fsm_manual+0x110>)
 80005ce:	2216      	movs	r2, #22
 80005d0:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff fdd4 	bl	8000180 <IsButtonLongPress>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10a      	bne.n	80005f4 <fsm_manual+0x58>
			statusLED = RED_GREEN;
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <fsm_manual+0x110>)
 80005e0:	220b      	movs	r2, #11
 80005e2:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_RED;
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <fsm_manual+0x114>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a32      	ldr	r2, [pc, #200]	; (80006b4 <fsm_manual+0x118>)
 80005ea:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_GREEN;
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <fsm_manual+0x11c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a32      	ldr	r2, [pc, #200]	; (80006bc <fsm_manual+0x120>)
 80005f2:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 80005f4:	f7ff feac 	bl	8000350 <displayTraffic>
		break;
 80005f8:	e056      	b.n	80006a8 <fsm_manual+0x10c>
	case MAN_RED_YELLOW:
		if(IsButtonPress(1) == 1){
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff fda6 	bl	800014c <IsButtonPress>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d102      	bne.n	800060c <fsm_manual+0x70>
			statusLED = MAN_GREEN_RED;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <fsm_manual+0x110>)
 8000608:	2217      	movs	r2, #23
 800060a:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 800060c:	2002      	movs	r0, #2
 800060e:	f7ff fdb7 	bl	8000180 <IsButtonLongPress>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10a      	bne.n	800062e <fsm_manual+0x92>
			statusLED = RED_YELLOW;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <fsm_manual+0x110>)
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_YELLOW;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <fsm_manual+0x124>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <fsm_manual+0x118>)
 8000624:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_YELLOW;
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <fsm_manual+0x124>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a24      	ldr	r2, [pc, #144]	; (80006bc <fsm_manual+0x120>)
 800062c:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 800062e:	f7ff fe8f 	bl	8000350 <displayTraffic>

		break;
 8000632:	e039      	b.n	80006a8 <fsm_manual+0x10c>
	case MAN_GREEN_RED:
		if(IsButtonPress(1) == 1){
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff fd89 	bl	800014c <IsButtonPress>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d102      	bne.n	8000646 <fsm_manual+0xaa>
			statusLED = MAN_YELLOW_RED;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <fsm_manual+0x110>)
 8000642:	2218      	movs	r2, #24
 8000644:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fd9a 	bl	8000180 <IsButtonLongPress>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d10a      	bne.n	8000668 <fsm_manual+0xcc>
			statusLED = GREEN_RED;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <fsm_manual+0x110>)
 8000654:	220d      	movs	r2, #13
 8000656:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_GREEN;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <fsm_manual+0x11c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <fsm_manual+0x118>)
 800065e:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_RED;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <fsm_manual+0x114>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <fsm_manual+0x120>)
 8000666:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 8000668:	f7ff fe72 	bl	8000350 <displayTraffic>

		break;
 800066c:	e01c      	b.n	80006a8 <fsm_manual+0x10c>
	case MAN_YELLOW_RED:
		if(IsButtonPress(1) == 1){
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fd6c 	bl	800014c <IsButtonPress>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d102      	bne.n	8000680 <fsm_manual+0xe4>
			statusLED = MAN_RED_GREEN;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <fsm_manual+0x110>)
 800067c:	2215      	movs	r2, #21
 800067e:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonLongPress(2) == 1){
 8000680:	2002      	movs	r0, #2
 8000682:	f7ff fd7d 	bl	8000180 <IsButtonLongPress>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10a      	bne.n	80006a2 <fsm_manual+0x106>
			statusLED = YELLOW_RED;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <fsm_manual+0x110>)
 800068e:	220e      	movs	r2, #14
 8000690:	601a      	str	r2, [r3, #0]
			countDownLEDA = count_YELLOW;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <fsm_manual+0x124>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <fsm_manual+0x118>)
 8000698:	6013      	str	r3, [r2, #0]
			countDownLEDB = count_YELLOW;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <fsm_manual+0x124>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <fsm_manual+0x120>)
 80006a0:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 80006a2:	f7ff fe55 	bl	8000350 <displayTraffic>

		break;
 80006a6:	bf00      	nop
	}
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	20000044 	.word	0x20000044
 80006b4:	200000a8 	.word	0x200000a8
 80006b8:	20000048 	.word	0x20000048
 80006bc:	20000098 	.word	0x20000098
 80006c0:	2000004c 	.word	0x2000004c

080006c4 <fsm_mode>:
int count_RED = 5;
int count_GREEN = 3;
int count_YELLOW = 2;


void fsm_mode(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	switch(status_mode){
 80006c8:	4b6b      	ldr	r3, [pc, #428]	; (8000878 <fsm_mode+0x1b4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	f200 80ce 	bhi.w	800086e <fsm_mode+0x1aa>
 80006d2:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <fsm_mode+0x14>)
 80006d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d8:	080006ed 	.word	0x080006ed
 80006dc:	0800071b 	.word	0x0800071b
 80006e0:	08000731 	.word	0x08000731
 80006e4:	0800079b 	.word	0x0800079b
 80006e8:	08000805 	.word	0x08000805
	case INIT:
		status_mode = MODE1;
 80006ec:	4b62      	ldr	r3, [pc, #392]	; (8000878 <fsm_mode+0x1b4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
		statusLED = RED_GREEN;
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <fsm_mode+0x1b8>)
 80006f4:	220b      	movs	r2, #11
 80006f6:	601a      	str	r2, [r3, #0]
		countDownA=count_RED;
 80006f8:	4b61      	ldr	r3, [pc, #388]	; (8000880 <fsm_mode+0x1bc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a61      	ldr	r2, [pc, #388]	; (8000884 <fsm_mode+0x1c0>)
 80006fe:	6013      	str	r3, [r2, #0]
		countDownB=count_GREEN;
 8000700:	4b61      	ldr	r3, [pc, #388]	; (8000888 <fsm_mode+0x1c4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a61      	ldr	r2, [pc, #388]	; (800088c <fsm_mode+0x1c8>)
 8000706:	6013      	str	r3, [r2, #0]

		countDownLEDA=count_RED;
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <fsm_mode+0x1bc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a60      	ldr	r2, [pc, #384]	; (8000890 <fsm_mode+0x1cc>)
 800070e:	6013      	str	r3, [r2, #0]
		countDownLEDB=count_GREEN;
 8000710:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <fsm_mode+0x1c4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a5f      	ldr	r2, [pc, #380]	; (8000894 <fsm_mode+0x1d0>)
 8000716:	6013      	str	r3, [r2, #0]
		break;
 8000718:	e0ac      	b.n	8000874 <fsm_mode+0x1b0>
	case MODE1:
		if(IsButtonPress(1) == 1){
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fd16 	bl	800014c <IsButtonPress>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	f040 80a5 	bne.w	8000872 <fsm_mode+0x1ae>
			status_mode = MODE2;
 8000728:	4b53      	ldr	r3, [pc, #332]	; (8000878 <fsm_mode+0x1b4>)
 800072a:	2202      	movs	r2, #2
 800072c:	601a      	str	r2, [r3, #0]
		}
		break;
 800072e:	e0a0      	b.n	8000872 <fsm_mode+0x1ae>
	case MODE2:
		statusLED = MODE2;
 8000730:	4b52      	ldr	r3, [pc, #328]	; (800087c <fsm_mode+0x1b8>)
 8000732:	2202      	movs	r2, #2
 8000734:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff fd08 	bl	800014c <IsButtonPress>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d102      	bne.n	8000748 <fsm_mode+0x84>
			status_mode = MODE3;
 8000742:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <fsm_mode+0x1b4>)
 8000744:	2203      	movs	r2, #3
 8000746:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff fcff 	bl	800014c <IsButtonPress>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d104      	bne.n	800075e <fsm_mode+0x9a>
			// add value
			countTemp+=1;
 8000754:	4b50      	ldr	r3, [pc, #320]	; (8000898 <fsm_mode+0x1d4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <fsm_mode+0x1d4>)
 800075c:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonLongPress(2) == 1){
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fd0e 	bl	8000180 <IsButtonLongPress>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d104      	bne.n	8000774 <fsm_mode+0xb0>
			// subtract value
			countTemp-=1;
 800076a:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <fsm_mode+0x1d4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	4a49      	ldr	r2, [pc, #292]	; (8000898 <fsm_mode+0x1d4>)
 8000772:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff fce9 	bl	800014c <IsButtonPress>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d109      	bne.n	8000794 <fsm_mode+0xd0>
			//set value
			count_RED += countTemp;
 8000780:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <fsm_mode+0x1bc>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b44      	ldr	r3, [pc, #272]	; (8000898 <fsm_mode+0x1d4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4413      	add	r3, r2
 800078a:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <fsm_mode+0x1bc>)
 800078c:	6013      	str	r3, [r2, #0]
			countTemp=0;
 800078e:	4b42      	ldr	r3, [pc, #264]	; (8000898 <fsm_mode+0x1d4>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000794:	f7ff fddc 	bl	8000350 <displayTraffic>
		break;
 8000798:	e06c      	b.n	8000874 <fsm_mode+0x1b0>
	case MODE3:
		statusLED = MODE3;
 800079a:	4b38      	ldr	r3, [pc, #224]	; (800087c <fsm_mode+0x1b8>)
 800079c:	2203      	movs	r2, #3
 800079e:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fcd3 	bl	800014c <IsButtonPress>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d102      	bne.n	80007b2 <fsm_mode+0xee>
			status_mode = MODE4;
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <fsm_mode+0x1b4>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 80007b2:	2002      	movs	r0, #2
 80007b4:	f7ff fcca 	bl	800014c <IsButtonPress>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d104      	bne.n	80007c8 <fsm_mode+0x104>
			// add value
			countTemp+=1;
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <fsm_mode+0x1d4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a34      	ldr	r2, [pc, #208]	; (8000898 <fsm_mode+0x1d4>)
 80007c6:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonLongPress(2) == 1){
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff fcd9 	bl	8000180 <IsButtonLongPress>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d104      	bne.n	80007de <fsm_mode+0x11a>
			// subtract value
			countTemp-=1;
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <fsm_mode+0x1d4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <fsm_mode+0x1d4>)
 80007dc:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 80007de:	2003      	movs	r0, #3
 80007e0:	f7ff fcb4 	bl	800014c <IsButtonPress>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d109      	bne.n	80007fe <fsm_mode+0x13a>
			//set value
			count_YELLOW += countTemp;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <fsm_mode+0x1d8>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <fsm_mode+0x1d4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a29      	ldr	r2, [pc, #164]	; (800089c <fsm_mode+0x1d8>)
 80007f6:	6013      	str	r3, [r2, #0]
			countTemp=0;
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <fsm_mode+0x1d4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 80007fe:	f7ff fda7 	bl	8000350 <displayTraffic>
		break;
 8000802:	e037      	b.n	8000874 <fsm_mode+0x1b0>
	case MODE4:
		statusLED = MODE4;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <fsm_mode+0x1b8>)
 8000806:	2204      	movs	r2, #4
 8000808:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fc9e 	bl	800014c <IsButtonPress>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <fsm_mode+0x158>
			status_mode = MODE1;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <fsm_mode+0x1b4>)
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 800081c:	2002      	movs	r0, #2
 800081e:	f7ff fc95 	bl	800014c <IsButtonPress>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d104      	bne.n	8000832 <fsm_mode+0x16e>
			// add value
			countTemp+=1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <fsm_mode+0x1d4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <fsm_mode+0x1d4>)
 8000830:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonLongPress(2) == 1){
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff fca4 	bl	8000180 <IsButtonLongPress>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d104      	bne.n	8000848 <fsm_mode+0x184>
			// subtract value
			countTemp-=1;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <fsm_mode+0x1d4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3b01      	subs	r3, #1
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <fsm_mode+0x1d4>)
 8000846:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000848:	2003      	movs	r0, #3
 800084a:	f7ff fc7f 	bl	800014c <IsButtonPress>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d109      	bne.n	8000868 <fsm_mode+0x1a4>
			//set value
			count_GREEN += countTemp;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <fsm_mode+0x1c4>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <fsm_mode+0x1d4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4413      	add	r3, r2
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <fsm_mode+0x1c4>)
 8000860:	6013      	str	r3, [r2, #0]
			countTemp=0;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <fsm_mode+0x1d4>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000868:	f7ff fd72 	bl	8000350 <displayTraffic>
		break;
 800086c:	e002      	b.n	8000874 <fsm_mode+0x1b0>
	default:
		break;
 800086e:	bf00      	nop
 8000870:	e000      	b.n	8000874 <fsm_mode+0x1b0>
		break;
 8000872:	bf00      	nop
	}
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000090 	.word	0x20000090
 800087c:	2000008c 	.word	0x2000008c
 8000880:	20000044 	.word	0x20000044
 8000884:	200000b8 	.word	0x200000b8
 8000888:	20000048 	.word	0x20000048
 800088c:	200000bc 	.word	0x200000bc
 8000890:	200000a8 	.word	0x200000a8
 8000894:	20000098 	.word	0x20000098
 8000898:	20000088 	.word	0x20000088
 800089c:	2000004c 	.word	0x2000004c

080008a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f023 030f 	bic.w	r3, r3, #15
 80008b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	f043 030c 	orr.w	r3, r3, #12
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	f043 030c 	orr.w	r3, r3, #12
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008e0:	f107 0208 	add.w	r2, r7, #8
 80008e4:	2364      	movs	r3, #100	; 0x64
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2304      	movs	r3, #4
 80008ea:	2142      	movs	r1, #66	; 0x42
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <lcd_send_cmd+0x5c>)
 80008ee:	f001 f9b7 	bl	8001c60 <HAL_I2C_Master_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000c0 	.word	0x200000c0

08000900 <lcd_init>:
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000904:	2033      	movs	r0, #51	; 0x33
 8000906:	f7ff ffcb 	bl	80008a0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f7ff ffc8 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000910:	2032      	movs	r0, #50	; 0x32
 8000912:	f000 fd41 	bl	8001398 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000916:	2028      	movs	r0, #40	; 0x28
 8000918:	f7ff ffc2 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	f000 fd3b 	bl	8001398 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff ffbc 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000928:	2032      	movs	r0, #50	; 0x32
 800092a:	f000 fd35 	bl	8001398 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ffb6 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000934:	2032      	movs	r0, #50	; 0x32
 8000936:	f000 fd2f 	bl	8001398 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800093a:	200c      	movs	r0, #12
 800093c:	f7ff ffb0 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f000 fd29 	bl	8001398 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff ffaa 	bl	80008a0 <lcd_send_cmd>
	HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 fd23 	bl	8001398 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	f7ff ffa4 	bl	80008a0 <lcd_send_cmd>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <ledtest>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledtest(){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000960:	2120      	movs	r1, #32
 8000962:	4802      	ldr	r0, [pc, #8]	; (800096c <ledtest+0x10>)
 8000964:	f000 fffd 	bl	8001962 <HAL_GPIO_TogglePin>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010800 	.word	0x40010800

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fcae 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f844 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f928 	bl	8000bd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000980:	f000 f8fc 	bl	8000b7c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000984:	f000 f8ae 	bl	8000ae4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000988:	f000 f87e 	bl	8000a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800098c:	f7ff ffb8 	bl	8000900 <lcd_init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000990:	4815      	ldr	r0, [pc, #84]	; (80009e8 <main+0x78>)
 8000992:	f002 f91b 	bl	8002bcc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Init();
 8000996:	f000 f9d0 	bl	8000d3a <SCH_Init>

	SCH_Add_Task(ledtest, 0, 1000);
 800099a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099e:	2100      	movs	r1, #0
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <main+0x7c>)
 80009a2:	f000 f9df 	bl	8000d64 <SCH_Add_Task>

	SCH_Add_Task(getKeyInput, 0, 10);
 80009a6:	220a      	movs	r2, #10
 80009a8:	2100      	movs	r1, #0
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <main+0x80>)
 80009ac:	f000 f9da 	bl	8000d64 <SCH_Add_Task>
	SCH_Add_Task(displayTraffic, 0, 1000);
 80009b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b4:	2100      	movs	r1, #0
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <main+0x84>)
 80009b8:	f000 f9d4 	bl	8000d64 <SCH_Add_Task>
	SCH_Add_Task(fsm_automatic, 0, 1000);
 80009bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <main+0x88>)
 80009c4:	f000 f9ce 	bl	8000d64 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual, 0, 1000);
 80009c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009cc:	2100      	movs	r1, #0
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <main+0x8c>)
 80009d0:	f000 f9c8 	bl	8000d64 <SCH_Add_Task>
	SCH_Add_Task(fsm_mode, 0, 1000);
 80009d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d8:	2100      	movs	r1, #0
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <main+0x90>)
 80009dc:	f000 f9c2 	bl	8000d64 <SCH_Add_Task>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_Dispatch_Tasks();
 80009e0:	f000 fa80 	bl	8000ee4 <SCH_Dispatch_Tasks>
 80009e4:	e7fc      	b.n	80009e0 <main+0x70>
 80009e6:	bf00      	nop
 80009e8:	20000114 	.word	0x20000114
 80009ec:	0800095d 	.word	0x0800095d
 80009f0:	08000231 	.word	0x08000231
 80009f4:	08000351 	.word	0x08000351
 80009f8:	0800042d 	.word	0x0800042d
 80009fc:	0800059d 	.word	0x0800059d
 8000a00:	080006c5 	.word	0x080006c5

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	; 0x40
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	2228      	movs	r2, #40	; 0x28
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fd7e 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a3a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fc63 	bl	8002310 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a50:	f000 f96e 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fece 	bl	8002810 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a7a:	f000 f959 	bl	8000d30 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3740      	adds	r7, #64	; 0x40
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f000 ff87 	bl	80019d8 <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 f92e 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000c0 	.word	0x200000c0
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	000186a0 	.word	0x000186a0

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b18:	2209      	movs	r2, #9
 8000b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b2a:	f001 ffff 	bl	8002b2c <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b34:	f000 f8fc 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b46:	f002 f983 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b50:	f000 f8ee 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b62:	f002 fb65 	bl	8003230 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f8e0 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000114 	.word	0x20000114

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f002 fbac 	bl	8003310 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f8b7 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000015c 	.word	0x2000015c
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a47      	ldr	r2, [pc, #284]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b45      	ldr	r3, [pc, #276]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfc:	4b42      	ldr	r3, [pc, #264]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a41      	ldr	r2, [pc, #260]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a3b      	ldr	r2, [pc, #236]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a35      	ldr	r2, [pc, #212]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <MX_GPIO_Init+0x138>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c4a:	4830      	ldr	r0, [pc, #192]	; (8000d0c <MX_GPIO_Init+0x13c>)
 8000c4c:	f000 fe71 	bl	8001932 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000c56:	482e      	ldr	r0, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x140>)
 8000c58:	f000 fe6b 	bl	8001932 <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	482c      	ldr	r0, [pc, #176]	; (8000d14 <MX_GPIO_Init+0x144>)
 8000c62:	f000 fe66 	bl	8001932 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4826      	ldr	r0, [pc, #152]	; (8000d14 <MX_GPIO_Init+0x144>)
 8000c7c:	f000 fcbe 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8000c80:	2303      	movs	r3, #3
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	481e      	ldr	r0, [pc, #120]	; (8000d0c <MX_GPIO_Init+0x13c>)
 8000c94:	f000 fcb2 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|D7_Pin|D8_Pin;
 8000c98:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4816      	ldr	r0, [pc, #88]	; (8000d0c <MX_GPIO_Init+0x13c>)
 8000cb2:	f000 fca3 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000cb6:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000cba:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4810      	ldr	r0, [pc, #64]	; (8000d10 <MX_GPIO_Init+0x140>)
 8000cd0:	f000 fc94 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480a      	ldr	r0, [pc, #40]	; (8000d14 <MX_GPIO_Init+0x144>)
 8000cec:	f000 fc86 	bl	80015fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2028      	movs	r0, #40	; 0x28
 8000cf6:	f000 fc4a 	bl	800158e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cfa:	2028      	movs	r0, #40	; 0x28
 8000cfc:	f000 fc63 	bl	80015c6 <HAL_NVIC_EnableIRQ>

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000
 8000d18:	10110000 	.word	0x10110000

08000d1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000d24:	f000 f87e 	bl	8000e24 <SCH_Update>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>

08000d3a <SCH_Init>:
#define TICK 10

sTask SCH_tasks_G[SCH_MAX_TASK];
uint8_t current_index_task = 0;

void SCH_Init(void) {
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
	for(int i=0;i<SCH_MAX_TASK;i++){
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	e006      	b.n	8000d54 <SCH_Init+0x1a>
		SCH_Delete(i);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f91b 	bl	8000f84 <SCH_Delete>
	for(int i=0;i<SCH_MAX_TASK;i++){
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3301      	adds	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b27      	cmp	r3, #39	; 0x27
 8000d58:	ddf5      	ble.n	8000d46 <SCH_Init+0xc>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASK) {
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b27      	cmp	r3, #39	; 0x27
 8000d76:	d84a      	bhi.n	8000e0e <SCH_Add_Task+0xaa>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <SCH_Add_Task+0xb8>)
 8000d80:	460b      	mov	r3, r1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <SCH_Add_Task+0xbc>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	491f      	ldr	r1, [pc, #124]	; (8000e1c <SCH_Add_Task+0xb8>)
 8000da0:	4603      	mov	r3, r0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4403      	add	r3, r0
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	3304      	adds	r3, #4
 8000dac:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <SCH_Add_Task+0xbc>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	4917      	ldr	r1, [pc, #92]	; (8000e1c <SCH_Add_Task+0xb8>)
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4403      	add	r3, r0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	3308      	adds	r3, #8
 8000dcc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <SCH_Add_Task+0xb8>)
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	330c      	adds	r3, #12
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4610      	mov	r0, r2
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SCH_Add_Task+0xb8>)
 8000df4:	460b      	mov	r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3310      	adds	r3, #16
 8000e00:	6018      	str	r0, [r3, #0]
		current_index_task++;
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <SCH_Add_Task+0xb4>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	20000094 	.word	0x20000094
 8000e1c:	200001a4 	.word	0x200001a4
 8000e20:	cccccccd 	.word	0xcccccccd

08000e24 <SCH_Update>:
void SCH_Update(void) {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	e048      	b.n	8000ec2 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 8000e30:	492a      	ldr	r1, [pc, #168]	; (8000edc <SCH_Update+0xb8>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3304      	adds	r3, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d013      	beq.n	8000e6e <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8000e46:	4925      	ldr	r1, [pc, #148]	; (8000edc <SCH_Update+0xb8>)
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	3304      	adds	r3, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	1e59      	subs	r1, r3, #1
 8000e5a:	4820      	ldr	r0, [pc, #128]	; (8000edc <SCH_Update+0xb8>)
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4403      	add	r3, r0
 8000e68:	3304      	adds	r3, #4
 8000e6a:	6019      	str	r1, [r3, #0]
 8000e6c:	e026      	b.n	8000ebc <SCH_Update+0x98>
		} else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000e6e:	491b      	ldr	r1, [pc, #108]	; (8000edc <SCH_Update+0xb8>)
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <SCH_Update+0xb8>)
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	3304      	adds	r3, #4
 8000e90:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000e92:	4912      	ldr	r1, [pc, #72]	; (8000edc <SCH_Update+0xb8>)
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2d8      	uxtb	r0, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <SCH_Update+0xb8>)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	330c      	adds	r3, #12
 8000eb8:	4602      	mov	r2, r0
 8000eba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <SCH_Update+0xbc>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	dbb0      	blt.n	8000e30 <SCH_Update+0xc>
		}
	}
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200001a4 	.word	0x200001a4
 8000ee0:	20000094 	.word	0x20000094

08000ee4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e03a      	b.n	8000f66 <SCH_Dispatch_Tasks+0x82>
		if (SCH_tasks_G[i].RunMe > 0) {
 8000ef0:	4922      	ldr	r1, [pc, #136]	; (8000f7c <SCH_Dispatch_Tasks+0x98>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	330c      	adds	r3, #12
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d02c      	beq.n	8000f60 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe--;
 8000f06:	491d      	ldr	r1, [pc, #116]	; (8000f7c <SCH_Dispatch_Tasks+0x98>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	330c      	adds	r3, #12
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b2d8      	uxtb	r0, r3
 8000f1c:	4917      	ldr	r1, [pc, #92]	; (8000f7c <SCH_Dispatch_Tasks+0x98>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	330c      	adds	r3, #12
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8000f30:	4912      	ldr	r1, [pc, #72]	; (8000f7c <SCH_Dispatch_Tasks+0x98>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4798      	blx	r3
			if(SCH_tasks_G[i].Period == 0){
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <SCH_Dispatch_Tasks+0x98>)
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3308      	adds	r3, #8
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete(i);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f812 	bl	8000f84 <SCH_Delete>
	for (int i = 0; i < current_index_task; i++) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SCH_Dispatch_Tasks+0x9c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	dbbe      	blt.n	8000ef0 <SCH_Dispatch_Tasks+0xc>
			}
		}

	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001a4 	.word	0x200001a4
 8000f80:	20000094 	.word	0x20000094

08000f84 <SCH_Delete>:

void SCH_Delete(uint32_t ID) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	current_index_task--;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <SCH_Delete+0xb4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SCH_Delete+0xb4>)
 8000f96:	701a      	strb	r2, [r3, #0]
	for ( i = ID; i < SCH_MAX_TASK; i++) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e043      	b.n	8001026 <SCH_Delete+0xa2>
		SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	4926      	ldr	r1, [pc, #152]	; (800103c <SCH_Delete+0xb8>)
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	6819      	ldr	r1, [r3, #0]
 8000fb0:	4822      	ldr	r0, [pc, #136]	; (800103c <SCH_Delete+0xb8>)
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4403      	add	r3, r0
 8000fbe:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay ;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	491d      	ldr	r1, [pc, #116]	; (800103c <SCH_Delete+0xb8>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	6819      	ldr	r1, [r3, #0]
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <SCH_Delete+0xb8>)
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4403      	add	r3, r0
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period ;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	4914      	ldr	r1, [pc, #80]	; (800103c <SCH_Delete+0xb8>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	4810      	ldr	r0, [pc, #64]	; (800103c <SCH_Delete+0xb8>)
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4403      	add	r3, r0
 8001008:	3308      	adds	r3, #8
 800100a:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 800100c:	490b      	ldr	r1, [pc, #44]	; (800103c <SCH_Delete+0xb8>)
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	330c      	adds	r3, #12
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	for ( i = ID; i < SCH_MAX_TASK; i++) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b27      	cmp	r3, #39	; 0x27
 800102a:	d9b8      	bls.n	8000f9e <SCH_Delete+0x1a>
	}
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000094 	.word	0x20000094
 800103c:	200001a4 	.word	0x200001a4

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_MspInit+0x5c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_MspInit+0x5c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_MspInit+0x5c>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x5c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x5c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x5c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_MspInit+0x60>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_MspInit+0x60>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_I2C_MspInit+0x90>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d132      	bne.n	800112a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_I2C_MspInit+0x94>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_I2C_MspInit+0x94>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_I2C_MspInit+0x94>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4812      	ldr	r0, [pc, #72]	; (800113c <HAL_I2C_MspInit+0x98>)
 80010f2:	f000 fa83 	bl	80015fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_I2C_MspInit+0x9c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_I2C_MspInit+0x9c>)
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2C_MspInit+0x94>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_I2C_MspInit+0x94>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_I2C_MspInit+0x94>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40005400 	.word	0x40005400
 8001138:	40021000 	.word	0x40021000
 800113c:	40010c00 	.word	0x40010c00
 8001140:	40010000 	.word	0x40010000

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d113      	bne.n	800117e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_TIM_Base_MspInit+0x44>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_TIM_Base_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_TIM_Base_MspInit+0x44>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	201c      	movs	r0, #28
 8001174:	f000 fa0b 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001178:	201c      	movs	r0, #28
 800117a:	f000 fa24 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x70>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d123      	bne.n	80011f4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_UART_MspInit+0x74>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_UART_MspInit+0x74>)
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b6:	61d3      	str	r3, [r2, #28]
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_UART_MspInit+0x74>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_UART_MspInit+0x74>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_UART_MspInit+0x74>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_UART_MspInit+0x74>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011dc:	230c      	movs	r3, #12
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_MspInit+0x78>)
 80011f0:	f000 fa04 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40004400 	.word	0x40004400
 8001200:	40021000 	.word	0x40021000
 8001204:	40010800 	.word	0x40010800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f887 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM2_IRQHandler+0x10>)
 800125e:	f001 fd07 	bl	8002c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000114 	.word	0x20000114

0800126c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001270:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001274:	f000 fb8e 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff fff8 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f002 f90b 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fb5b 	bl	8000970 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012c4:	08003570 	.word	0x08003570
  ldr r2, =_sbss
 80012c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012cc:	200004c8 	.word	0x200004c8

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f947 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fea6 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f95f 	bl	80015e2 <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f927 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000050 	.word	0x20000050
 8001358:	20000058 	.word	0x20000058
 800135c:	20000054 	.word	0x20000054

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <HAL_IncTick+0x20>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000058 	.word	0x20000058
 8001380:	200004c4 	.word	0x200004c4

08001384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200004c4 	.word	0x200004c4

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fff0 	bl	8001384 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffe0 	bl	8001384 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000058 	.word	0x20000058

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4906      	ldr	r1, [pc, #24]	; (8001478 <__NVIC_EnableIRQ+0x34>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff90 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff2d 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff42 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff90 	bl	80014d0 <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5f 	bl	800147c <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff35 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e169      	b.n	80018e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001610:	2201      	movs	r2, #1
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8158 	bne.w	80018de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4a9a      	ldr	r2, [pc, #616]	; (800189c <HAL_GPIO_Init+0x2a0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d05e      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001638:	4a98      	ldr	r2, [pc, #608]	; (800189c <HAL_GPIO_Init+0x2a0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d875      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 800163e:	4a98      	ldr	r2, [pc, #608]	; (80018a0 <HAL_GPIO_Init+0x2a4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d058      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001644:	4a96      	ldr	r2, [pc, #600]	; (80018a0 <HAL_GPIO_Init+0x2a4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d86f      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 800164a:	4a96      	ldr	r2, [pc, #600]	; (80018a4 <HAL_GPIO_Init+0x2a8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d052      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001650:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <HAL_GPIO_Init+0x2a8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d869      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 8001656:	4a94      	ldr	r2, [pc, #592]	; (80018a8 <HAL_GPIO_Init+0x2ac>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d04c      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 800165c:	4a92      	ldr	r2, [pc, #584]	; (80018a8 <HAL_GPIO_Init+0x2ac>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d863      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 8001662:	4a92      	ldr	r2, [pc, #584]	; (80018ac <HAL_GPIO_Init+0x2b0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d046      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001668:	4a90      	ldr	r2, [pc, #576]	; (80018ac <HAL_GPIO_Init+0x2b0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d85d      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d82a      	bhi.n	80016c8 <HAL_GPIO_Init+0xcc>
 8001672:	2b12      	cmp	r3, #18
 8001674:	d859      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <HAL_GPIO_Init+0x80>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	080016f7 	.word	0x080016f7
 8001680:	080016d1 	.word	0x080016d1
 8001684:	080016e3 	.word	0x080016e3
 8001688:	08001725 	.word	0x08001725
 800168c:	0800172b 	.word	0x0800172b
 8001690:	0800172b 	.word	0x0800172b
 8001694:	0800172b 	.word	0x0800172b
 8001698:	0800172b 	.word	0x0800172b
 800169c:	0800172b 	.word	0x0800172b
 80016a0:	0800172b 	.word	0x0800172b
 80016a4:	0800172b 	.word	0x0800172b
 80016a8:	0800172b 	.word	0x0800172b
 80016ac:	0800172b 	.word	0x0800172b
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	0800172b 	.word	0x0800172b
 80016b8:	0800172b 	.word	0x0800172b
 80016bc:	0800172b 	.word	0x0800172b
 80016c0:	080016d9 	.word	0x080016d9
 80016c4:	080016ed 	.word	0x080016ed
 80016c8:	4a79      	ldr	r2, [pc, #484]	; (80018b0 <HAL_GPIO_Init+0x2b4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ce:	e02c      	b.n	800172a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e029      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	3304      	adds	r3, #4
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e024      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	3308      	adds	r3, #8
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e01f      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	330c      	adds	r3, #12
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e01a      	b.n	800172c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fe:	2304      	movs	r3, #4
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e013      	b.n	800172c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	611a      	str	r2, [r3, #16]
          break;
 8001716:	e009      	b.n	800172c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001718:	2308      	movs	r3, #8
 800171a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	615a      	str	r2, [r3, #20]
          break;
 8001722:	e003      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x130>
          break;
 800172a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d801      	bhi.n	8001736 <HAL_GPIO_Init+0x13a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	e001      	b.n	800173a <HAL_GPIO_Init+0x13e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	d802      	bhi.n	8001748 <HAL_GPIO_Init+0x14c>
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x152>
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	3b08      	subs	r3, #8
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	210f      	movs	r1, #15
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80b1 	beq.w	80018de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800177c:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001794:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <HAL_GPIO_Init+0x2bc>)
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a40      	ldr	r2, [pc, #256]	; (80018bc <HAL_GPIO_Init+0x2c0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d013      	beq.n	80017e8 <HAL_GPIO_Init+0x1ec>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a3f      	ldr	r2, [pc, #252]	; (80018c0 <HAL_GPIO_Init+0x2c4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1e8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a3e      	ldr	r2, [pc, #248]	; (80018c4 <HAL_GPIO_Init+0x2c8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <HAL_GPIO_Init+0x2cc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1e0>
 80017d8:	2303      	movs	r3, #3
 80017da:	e006      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017dc:	2304      	movs	r3, #4
 80017de:	e004      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017e8:	2300      	movs	r3, #0
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	f002 0203 	and.w	r2, r2, #3
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	4093      	lsls	r3, r2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017fa:	492f      	ldr	r1, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x2bc>)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	492c      	ldr	r1, [pc, #176]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4928      	ldr	r1, [pc, #160]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800182c:	4013      	ands	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4922      	ldr	r1, [pc, #136]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	43db      	mvns	r3, r3
 8001852:	491e      	ldr	r1, [pc, #120]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001854:	4013      	ands	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4918      	ldr	r1, [pc, #96]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	4914      	ldr	r1, [pc, #80]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800187c:	4013      	ands	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d021      	beq.n	80018d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e021      	b.n	80018de <HAL_GPIO_Init+0x2e2>
 800189a:	bf00      	nop
 800189c:	10320000 	.word	0x10320000
 80018a0:	10310000 	.word	0x10310000
 80018a4:	10220000 	.word	0x10220000
 80018a8:	10210000 	.word	0x10210000
 80018ac:	10120000 	.word	0x10120000
 80018b0:	10110000 	.word	0x10110000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010000 	.word	0x40010000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	40011000 	.word	0x40011000
 80018c8:	40011400 	.word	0x40011400
 80018cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_GPIO_Init+0x304>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4909      	ldr	r1, [pc, #36]	; (8001900 <HAL_GPIO_Init+0x304>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	3301      	adds	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f47f ae8e 	bne.w	8001610 <HAL_GPIO_Init+0x14>
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	372c      	adds	r7, #44	; 0x2c
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40010400 	.word	0x40010400

08001904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001942:	787b      	ldrb	r3, [r7, #1]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194e:	e003      	b.n	8001958 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	041a      	lsls	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001974:	887a      	ldrh	r2, [r7, #2]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	041a      	lsls	r2, r3, #16
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43d9      	mvns	r1, r3
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	400b      	ands	r3, r1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f806 	bl	80019c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e12b      	b.n	8001c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fb50 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a3c:	f001 f830 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8001a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a81      	ldr	r2, [pc, #516]	; (8001c4c <HAL_I2C_Init+0x274>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d807      	bhi.n	8001a5c <HAL_I2C_Init+0x84>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <HAL_I2C_Init+0x278>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e006      	b.n	8001a6a <HAL_I2C_Init+0x92>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a7d      	ldr	r2, [pc, #500]	; (8001c54 <HAL_I2C_Init+0x27c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bf94      	ite	ls
 8001a64:	2301      	movls	r3, #1
 8001a66:	2300      	movhi	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0e7      	b.n	8001c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a78      	ldr	r2, [pc, #480]	; (8001c58 <HAL_I2C_Init+0x280>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9b      	lsrs	r3, r3, #18
 8001a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_I2C_Init+0x274>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d802      	bhi.n	8001aac <HAL_I2C_Init+0xd4>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	e009      	b.n	8001ac0 <HAL_I2C_Init+0xe8>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <HAL_I2C_Init+0x284>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	495c      	ldr	r1, [pc, #368]	; (8001c4c <HAL_I2C_Init+0x274>)
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d819      	bhi.n	8001b14 <HAL_I2C_Init+0x13c>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e59      	subs	r1, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001af4:	400b      	ands	r3, r1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HAL_I2C_Init+0x138>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e59      	subs	r1, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	e051      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e04f      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <HAL_I2C_Init+0x168>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e012      	b.n	8001b66 <HAL_I2C_Init+0x18e>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Init+0x196>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e022      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10e      	bne.n	8001b94 <HAL_I2C_Init+0x1bc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e58      	subs	r0, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	440b      	add	r3, r1
 8001b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	e00f      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0099      	lsls	r1, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	6809      	ldr	r1, [r1, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6911      	ldr	r1, [r2, #16]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68d2      	ldr	r2, [r2, #12]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	001e847f 	.word	0x001e847f
 8001c54:	003d08ff 	.word	0x003d08ff
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	10624dd3 	.word	0x10624dd3

08001c60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	817b      	strh	r3, [r7, #10]
 8001c70:	4613      	mov	r3, r2
 8001c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff fb86 	bl	8001384 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	f040 80e0 	bne.w	8001e48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2319      	movs	r3, #25
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4970      	ldr	r1, [pc, #448]	; (8001e54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f964 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e0d3      	b.n	8001e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2C_Master_Transmit+0x50>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e0cc      	b.n	8001e4a <HAL_I2C_Master_Transmit+0x1ea>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d007      	beq.n	8001cd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2221      	movs	r2, #33	; 0x21
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	893a      	ldrh	r2, [r7, #8]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d18:	8979      	ldrh	r1, [r7, #10]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f89c 	bl	8001e5c <I2C_MasterRequestWrite>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e08d      	b.n	8001e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d44:	e066      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	6a39      	ldr	r1, [r7, #32]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fa22 	bl	8002194 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00d      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d107      	bne.n	8001d6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06b      	b.n	8001e4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d11b      	bne.n	8001de8 <HAL_I2C_Master_Transmit+0x188>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d017      	beq.n	8001de8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	6a39      	ldr	r1, [r7, #32]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fa19 	bl	8002224 <I2C_WaitOnBTFFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00d      	beq.n	8001e14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d107      	bne.n	8001e10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e01a      	b.n	8001e4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d194      	bne.n	8001d46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	00100002 	.word	0x00100002
 8001e58:	ffff0000 	.word	0xffff0000

08001e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d006      	beq.n	8001e86 <I2C_MasterRequestWrite+0x2a>
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d003      	beq.n	8001e86 <I2C_MasterRequestWrite+0x2a>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e84:	d108      	bne.n	8001e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e00b      	b.n	8001eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d107      	bne.n	8001eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f84f 	bl	8001f60 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00d      	beq.n	8001ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d103      	bne.n	8001ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e035      	b.n	8001f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eec:	d108      	bne.n	8001f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eee:	897b      	ldrh	r3, [r7, #10]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	e01b      	b.n	8001f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f00:	897b      	ldrh	r3, [r7, #10]
 8001f02:	11db      	asrs	r3, r3, #7
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0306 	and.w	r3, r3, #6
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f063 030f 	orn	r3, r3, #15
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <I2C_MasterRequestWrite+0xfc>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f898 	bl	8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e010      	b.n	8001f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <I2C_MasterRequestWrite+0x100>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f888 	bl	8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	00010008 	.word	0x00010008
 8001f5c:	00010002 	.word	0x00010002

08001f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f70:	e048      	b.n	8002004 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d044      	beq.n	8002004 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff fa03 	bl	8001384 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d139      	bne.n	8002004 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10d      	bne.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	e00c      	b.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d116      	bne.n	8002004 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e023      	b.n	800204c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10d      	bne.n	800202a <I2C_WaitOnFlagUntilTimeout+0xca>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	43da      	mvns	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4013      	ands	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	e00c      	b.n	8002044 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	43da      	mvns	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4013      	ands	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	429a      	cmp	r2, r3
 8002048:	d093      	beq.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002062:	e071      	b.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d123      	bne.n	80020bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002082:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800208c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e067      	b.n	800218c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d041      	beq.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff f95e 	bl	8001384 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d136      	bne.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10c      	bne.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4013      	ands	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	e00b      	b.n	8002116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	43da      	mvns	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4013      	ands	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d016      	beq.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e021      	b.n	800218c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10c      	bne.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	43da      	mvns	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	e00b      	b.n	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4013      	ands	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af6d 	bne.w	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a0:	e034      	b.n	800220c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f886 	bl	80022b4 <I2C_IsAcknowledgeFailed>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e034      	b.n	800221c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d028      	beq.n	800220c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	f7ff f8e3 	bl	8001384 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11d      	bne.n	800220c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d016      	beq.n	800220c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d1c3      	bne.n	80021a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002230:	e034      	b.n	800229c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f83e 	bl	80022b4 <I2C_IsAcknowledgeFailed>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e034      	b.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d028      	beq.n	800229c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff f89b 	bl	8001384 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11d      	bne.n	800229c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d016      	beq.n	800229c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d1c3      	bne.n	8002232 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d11b      	bne.n	8002304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f043 0204 	orr.w	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e246      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ffca 	bl	8001384 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe ffc6 	bl	8001384 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1fa      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe ffb6 	bl	8001384 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe ffb2 	bl	8001384 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1e6      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1ba      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe ff6b 	bl	8001384 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe ff67 	bl	8001384 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e19b      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe ff4a 	bl	8001384 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe ff46 	bl	8001384 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe ff2a 	bl	8001384 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe ff26 	bl	8001384 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 facc 	bl	8002af0 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7fe ff10 	bl	8001384 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe ff0c 	bl	8001384 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e140      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a93      	ldr	r2, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8a      	ldr	r2, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fecd 	bl	8001384 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe fec9 	bl	8001384 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0fd      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe fe7d 	bl	8001384 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fe79 	bl	8001384 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ab      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fe67 	bl	8001384 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fe63 	bl	8001384 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e095      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8081 	beq.w	80027fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fe37 	bl	8001384 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe fe33 	bl	8001384 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	492d      	ldr	r1, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fe07 	bl	8001384 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fe03 	bl	8001384 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e037      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e02f      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fdf0 	bl	8001384 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fdec 	bl	8001384 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e020      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe fd40 	bl	8001384 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe fd3c 	bl	8001384 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fc9e 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	0800353c 	.word	0x0800353c
 80029dc:	20000050 	.word	0x20000050
 80029e0:	20000054 	.word	0x20000054

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x30>
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x36>
 8002a12:	e027      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a16:	613b      	str	r3, [r7, #16]
      break;
 8002a18:	e027      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0c5b      	lsrs	r3, r3, #17
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a46:	fb02 f203 	mul.w	r2, r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e004      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	613b      	str	r3, [r7, #16]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a66:	613b      	str	r3, [r7, #16]
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	693b      	ldr	r3, [r7, #16]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	007a1200 	.word	0x007a1200
 8002a80:	08003554 	.word	0x08003554
 8002a84:	08003564 	.word	0x08003564
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000050 	.word	0x20000050

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	f7ff fff2 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	0800354c 	.word	0x0800354c

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0adb      	lsrs	r3, r3, #11
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	0800354c 	.word	0x0800354c

08002af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <RCC_Delay+0x34>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <RCC_Delay+0x38>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0a5b      	lsrs	r3, r3, #9
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b0c:	bf00      	nop
  }
  while (Delay --);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	60fa      	str	r2, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f9      	bne.n	8002b0c <RCC_Delay+0x1c>
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000050 	.word	0x20000050
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e041      	b.n	8002bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe faf6 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 fa5c 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e03a      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIM_Base_Start_IT+0x98>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x58>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d010      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800

08002c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d020      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0202 	mvn.w	r2, #2
 8002ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f998 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f98b 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f99a 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d020      	beq.n	8002d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01b      	beq.n	8002d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0204 	mvn.w	r2, #4
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f972 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f965 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f974 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d020      	beq.n	8002d6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0208 	mvn.w	r2, #8
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f94c 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f93f 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f94e 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d020      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f926 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f919 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f928 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0201 	mvn.w	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd ffa0 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa7f 	bl	80032fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8f8 	bl	8003014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0220 	mvn.w	r2, #32
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa52 	bl	80032ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0b4      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x186>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea4:	d03e      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	f200 8087 	bhi.w	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	f000 8086 	beq.w	8002fc2 <HAL_TIM_ConfigClockSource+0x172>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d87f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d01a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ec0:	2b70      	cmp	r3, #112	; 0x70
 8002ec2:	d87b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d050      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x11a>
 8002ec8:	2b60      	cmp	r3, #96	; 0x60
 8002eca:	d877      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d03c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0xfa>
 8002ed0:	2b50      	cmp	r3, #80	; 0x50
 8002ed2:	d873      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d058      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x13a>
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d86f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d064      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee0:	2b30      	cmp	r3, #48	; 0x30
 8002ee2:	d86b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d060      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d867      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05c      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d05a      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef4:	e062      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f000 f974 	bl	80031f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
      break;
 8002f22:	e04f      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f000 f95d 	bl	80031f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	609a      	str	r2, [r3, #8]
      break;
 8002f48:	e03c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f8d4 	bl	8003104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2150      	movs	r1, #80	; 0x50
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f92b 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002f68:	e02c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8f2 	bl	8003160 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2160      	movs	r1, #96	; 0x60
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f91b 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002f88:	e01c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 f8b4 	bl	8003104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f90b 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e00c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f000 f902 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
	...

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <TIM_Base_SetConfig+0xd0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <TIM_Base_SetConfig+0xd4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <TIM_Base_SetConfig+0xd8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <TIM_Base_SetConfig+0xd0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <TIM_Base_SetConfig+0xd4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <TIM_Base_SetConfig+0xd8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <TIM_Base_SetConfig+0xd0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f023 0201 	bic.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]
  }
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800

08003104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 030a 	bic.w	r3, r3, #10
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0210 	bic.w	r2, r3, #16
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	031b      	lsls	r3, r3, #12
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	f043 0307 	orr.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800320c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	431a      	orrs	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4313      	orrs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	609a      	str	r2, [r3, #8]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003244:	2302      	movs	r3, #2
 8003246:	e046      	b.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d009      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10c      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800

080032ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e042      	b.n	80033a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd ff28 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f82b 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033ea:	f023 030c 	bic.w	r3, r3, #12
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <UART_SetConfig+0x114>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d103      	bne.n	8003420 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7ff fb56 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	e002      	b.n	8003426 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7ff fb3e 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8003424:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	0119      	lsls	r1, r3, #4
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	fbb2 f2f3 	udiv	r2, r2, r3
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <UART_SetConfig+0x118>)
 800345e:	fba3 0302 	umull	r0, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2064      	movs	r0, #100	; 0x64
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	3332      	adds	r3, #50	; 0x32
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <UART_SetConfig+0x118>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	4419      	add	r1, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <UART_SetConfig+0x118>)
 8003496:	fba3 0302 	umull	r0, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2064      	movs	r0, #100	; 0x64
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <UART_SetConfig+0x118>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	440a      	add	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40013800 	.word	0x40013800
 80034c8:	51eb851f 	.word	0x51eb851f

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f000 f822 	bl	8003524 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003568 	.word	0x08003568
 8003508:	08003568 	.word	0x08003568
 800350c:	08003568 	.word	0x08003568
 8003510:	0800356c 	.word	0x0800356c

08003514 <memset>:
 8003514:	4603      	mov	r3, r0
 8003516:	4402      	add	r2, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	f803 1b01 	strb.w	r1, [r3], #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <_init>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr

08003530 <_fini>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr
